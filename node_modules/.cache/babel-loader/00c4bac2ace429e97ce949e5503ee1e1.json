{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Hide: () => Hide,\n  Show: () => Show,\n  useBreakpoint: () => useBreakpoint,\n  useBreakpointValue: () => useBreakpointValue,\n  useColorModePreference: () => useColorModePreference,\n  useMediaQuery: () => useMediaQuery,\n  usePrefersReducedMotion: () => usePrefersReducedMotion,\n  useQuery: () => useQuery\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/media-query.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar getBreakpoint = (theme, value) => {\n  var _a, _b;\n  return (_b = (_a = theme == null ? void 0 : theme.breakpoints) == null ? void 0 : _a[value]) != null ? _b : value;\n};\nfunction useQuery(props) {\n  const {\n    breakpoint = \"\",\n    below,\n    above\n  } = props;\n  const theme = (0, import_system.useTheme)();\n  const bpBelow = getBreakpoint(theme, below);\n  const bpAbove = getBreakpoint(theme, above);\n  let query = breakpoint;\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`;\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`;\n  }\n  return query;\n}\n\n// src/use-media-query.ts\nvar import_react_env = require(\"@chakra-ui/react-env\");\nvar import_react = require(\"react\");\nfunction useMediaQuery(query, options = {}) {\n  const {\n    ssr = true,\n    fallback\n  } = options;\n  const {\n    getWindow\n  } = (0, import_react_env.useEnvironment)();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(v => v != null);\n  const [value, setValue] = (0, import_react.useState)(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n    }));\n  });\n  (0, import_react.useEffect)(() => {\n    const win = getWindow();\n    setValue(queries.map(query2 => ({\n      media: query2,\n      matches: win.matchMedia(query2).matches\n    })));\n    const mql = queries.map(query2 => win.matchMedia(query2));\n    const handler = evt => {\n      setValue(prev => {\n        return prev.slice().map(item => {\n          if (item.media === evt.media) return {\n            ...item,\n            matches: evt.matches\n          };\n          return item;\n        });\n      });\n    };\n    mql.forEach(mql2 => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach(mql2 => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(item => item.matches);\n}\n\n// src/visibility.tsx\nfunction Visibility(props) {\n  const {\n    breakpoint,\n    hide,\n    children,\n    ssr\n  } = props;\n  const [show] = useMediaQuery(breakpoint, {\n    ssr\n  });\n  const isVisible = hide ? !show : show;\n  const rendered = isVisible ? children : null;\n  return rendered;\n}\n\n// src/hide.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction Hide(props) {\n  const {\n    children,\n    ssr\n  } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(Visibility, {\n    breakpoint: query,\n    hide: true,\n    ssr,\n    children\n  });\n}\nHide.displayName = \"Hide\";\n\n// src/media-query.hook.ts\nfunction usePrefersReducedMotion(options) {\n  const [prefersReducedMotion] = useMediaQuery(\"(prefers-reduced-motion: reduce)\", options);\n  return prefersReducedMotion;\n}\nfunction useColorModePreference(options) {\n  const [isLight, isDark] = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"], options);\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return void 0;\n}\n\n// src/show.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nfunction Show(props) {\n  const {\n    children,\n    ssr\n  } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(Visibility, {\n    breakpoint: query,\n    ssr,\n    children\n  });\n}\nShow.displayName = \"Show\";\n\n// src/use-breakpoint.ts\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nfunction useBreakpoint(arg) {\n  var _a, _b;\n  const opts = (0, import_shared_utils.isObject)(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const theme = (0, import_system2.useTheme)();\n  const breakpoints = theme.__breakpoints.details.map(({\n    minMaxQuery,\n    breakpoint\n  }) => ({\n    breakpoint,\n    query: minMaxQuery.replace(\"@media screen and \", \"\")\n  }));\n  const fallback = breakpoints.map(bp => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: opts.ssr\n  });\n  const index = values.findIndex(value => value == true);\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\n\n// src/use-breakpoint-value.ts\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_breakpoint_utils2 = require(\"@chakra-ui/breakpoint-utils\");\n\n// src/media-query.utils.ts\nvar import_breakpoint_utils = require(\"@chakra-ui/breakpoint-utils\");\nfunction getClosestValue(values, breakpoint, breakpoints = import_breakpoint_utils.breakpoints) {\n  let index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  let stopIndex = breakpoints.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex];\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    const key = breakpoints[index];\n    return values[key];\n  }\n  return void 0;\n}\n\n// src/use-breakpoint-value.ts\nfunction useBreakpointValue(values, arg) {\n  var _a;\n  const opts = (0, import_shared_utils2.isObject)(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const breakpoint = useBreakpoint(opts);\n  const theme = (0, import_system3.useTheme)();\n  if (!breakpoint) return;\n  const breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries((0, import_breakpoint_utils2.arrayToObjectNotation)(values, breakpoints)).map(([key, value]) => [key, value])) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Hide,\n  Show,\n  useBreakpoint,\n  useBreakpointValue,\n  useColorModePreference,\n  useMediaQuery,\n  usePrefersReducedMotion,\n  useQuery\n});","map":null,"metadata":{},"sourceType":"script"}