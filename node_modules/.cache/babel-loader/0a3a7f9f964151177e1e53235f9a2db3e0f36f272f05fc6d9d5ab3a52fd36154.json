{"ast":null,"code":"import{memo,useContext,useEffect,useRef}from\"react\";import{useNavigate}from'react-router-dom';import{Spinner,Wrap,WrapItem,Center}from\"@chakra-ui/react\";import{LoginUserContext}from'../../providers/LoginUserProvider';import{useAllTournament}from\"../../hooks/useAllTournament\";import{TournamentCard}from\"../organisms/tournament/TournamentCard\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export const VotePage=/*#__PURE__*/memo(()=>{const navigate=useNavigate();const{loginUser,setLoginUser}=useContext(LoginUserContext);const timerId=useRef(null);const{getTournaments,tournaments,loading}=useAllTournament();// 自動ログアウトの時間（ミリ秒）\nconst autoLogoutTime=600000;// 10分\n//const autoLogoutTime = 10000; // 10秒\nuseEffect(()=>{const resetTimer=()=>{// タイマーをリセット\nif(timerId.current){clearTimeout(timerId.current);}// 新たなタイマーをセット\ntimerId.current=setTimeout(()=>{// ログアウト処理（例: setLoginUser(null)）\nsetLoginUser(null);// トップページにリダイレクト\nnavigate('/');},autoLogoutTime);};// ユーザーがアクションを起こすたびにタイマーをリセット\nconst resetTimerOnAction=()=>{resetTimer();};// 初回実行時にタイマーをセット\nresetTimer();// ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\ndocument.addEventListener('click',resetTimerOnAction);return()=>{// コンポーネントがアンマウントされたときにクリア\nif(timerId.current){clearTimeout(timerId.current);}document.removeEventListener('click',resetTimerOnAction);};},[setLoginUser,navigate,timerId]);// loginUserが存在するかどうかのチェック\nuseEffect(()=>{// loginUserが存在しない場合、トップページに遷移\nif(!loginUser){navigate('/');}},[loginUser,navigate]);useEffect(()=>getTournaments(),[getTournaments]);//const onClickTournament = useCallback();\nreturn/*#__PURE__*/_jsx(_Fragment,{children:loading?/*#__PURE__*/_jsx(Center,{h:\"100vh\",children:/*#__PURE__*/_jsx(Spinner,{})}):/*#__PURE__*/_jsx(Wrap,{p:{base:4,md:10},children:tournaments.map(tournament=>/*#__PURE__*/_jsx(WrapItem,{mx:\"auto\",children:/*#__PURE__*/_jsx(TournamentCard,{id:tournament.id,torName:tournament.name,date:tournament.date// onClick={onClickTournament}\n})},tournament.id))})});});","map":{"version":3,"names":["memo","useContext","useEffect","useRef","useNavigate","Spinner","Wrap","WrapItem","Center","LoginUserContext","useAllTournament","TournamentCard","jsx","_jsx","Fragment","_Fragment","VotePage","navigate","loginUser","setLoginUser","timerId","getTournaments","tournaments","loading","autoLogoutTime","resetTimer","current","clearTimeout","setTimeout","resetTimerOnAction","document","addEventListener","removeEventListener","children","h","p","base","md","map","tournament","mx","id","torName","name","date"],"sources":["/Users/nishidanaoto/ateori-app/src/components/pages/VotePage.tsx"],"sourcesContent":["import { memo, useCallback, useContext, useEffect, useRef } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Spinner,\n  Wrap,\n  WrapItem,\n  Center,\n  useDisclosure,\n} from \"@chakra-ui/react\";\n\nimport { LoginUserContext } from '../../providers/LoginUserProvider';\nimport { useAllTournament } from \"../../hooks/useAllTournament\";\nimport {TournamentCard} from \"../organisms/tournament/TournamentCard\";\n\nexport const VotePage = memo(() => {\n\n  const navigate = useNavigate();\n  const { loginUser, setLoginUser } = useContext(LoginUserContext);\n  const timerId = useRef<NodeJS.Timeout | null>(null);\n  const { getTournaments, tournaments, loading } = useAllTournament();\n\n  // 自動ログアウトの時間（ミリ秒）\n  const autoLogoutTime = 600000; // 10分\n  //const autoLogoutTime = 10000; // 10秒\n\n  useEffect(() => {\n    const resetTimer = () => {\n      // タイマーをリセット\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n\n      // 新たなタイマーをセット\n      timerId.current = setTimeout(() => {\n        // ログアウト処理（例: setLoginUser(null)）\n        setLoginUser(null);\n\n        // トップページにリダイレクト\n        navigate('/');\n      }, autoLogoutTime);\n    };\n\n    // ユーザーがアクションを起こすたびにタイマーをリセット\n    const resetTimerOnAction = () => {\n      resetTimer();\n    };\n\n    // 初回実行時にタイマーをセット\n    resetTimer();\n\n    // ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\n    document.addEventListener('click', resetTimerOnAction);\n\n    return () => {\n      // コンポーネントがアンマウントされたときにクリア\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n      document.removeEventListener('click', resetTimerOnAction);\n    };\n  }, [setLoginUser, navigate, timerId]);\n\n  // loginUserが存在するかどうかのチェック\n  useEffect(() => {\n    // loginUserが存在しない場合、トップページに遷移\n    if (!loginUser) {\n      navigate('/');\n    }\n  }, [loginUser, navigate]);\n\n  useEffect(() => getTournaments(), [getTournaments]);\n\n  //const onClickTournament = useCallback();\n\n  return (\n    <>\n     {loading ? (\n        <Center h=\"100vh\">\n          <Spinner />\n        </Center>\n      ) : (\n      <Wrap p={{ base: 4, md: 10 }}>\n          {tournaments.map((tournament) => (\n            <WrapItem key={tournament.id} mx=\"auto\">\n              <TournamentCard\n                id={tournament.id}\n                torName={tournament.name}\n                date={tournament.date}\n               // onClick={onClickTournament}\n              />\n            </WrapItem>\n          ))}\n        </Wrap>\n      )}\n    </>\n  );\n});\n"],"mappings":"AAAA,OAASA,IAAI,CAAeC,UAAU,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CACxE,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OACEC,OAAO,CACPC,IAAI,CACJC,QAAQ,CACRC,MAAM,KAED,kBAAkB,CAEzB,OAASC,gBAAgB,KAAQ,mCAAmC,CACpE,OAASC,gBAAgB,KAAQ,8BAA8B,CAC/D,OAAQC,cAAc,KAAO,wCAAwC,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAEtE,MAAO,MAAM,CAAAC,QAAQ,cAAGhB,IAAI,CAAC,IAAM,CAEjC,KAAM,CAAAiB,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEc,SAAS,CAAEC,YAAa,CAAC,CAAGlB,UAAU,CAACQ,gBAAgB,CAAC,CAChE,KAAM,CAAAW,OAAO,CAAGjB,MAAM,CAAwB,IAAI,CAAC,CACnD,KAAM,CAAEkB,cAAc,CAAEC,WAAW,CAAEC,OAAQ,CAAC,CAAGb,gBAAgB,CAAC,CAAC,CAEnE;AACA,KAAM,CAAAc,cAAc,CAAG,MAAM,CAAE;AAC/B;AAEAtB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAuB,UAAU,CAAGA,CAAA,GAAM,CACvB;AACA,GAAIL,OAAO,CAACM,OAAO,CAAE,CACnBC,YAAY,CAACP,OAAO,CAACM,OAAO,CAAC,CAC/B,CAEA;AACAN,OAAO,CAACM,OAAO,CAAGE,UAAU,CAAC,IAAM,CACjC;AACAT,YAAY,CAAC,IAAI,CAAC,CAElB;AACAF,QAAQ,CAAC,GAAG,CAAC,CACf,CAAC,CAAEO,cAAc,CAAC,CACpB,CAAC,CAED;AACA,KAAM,CAAAK,kBAAkB,CAAGA,CAAA,GAAM,CAC/BJ,UAAU,CAAC,CAAC,CACd,CAAC,CAED;AACAA,UAAU,CAAC,CAAC,CAEZ;AACAK,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAEF,kBAAkB,CAAC,CAEtD,MAAO,IAAM,CACX;AACA,GAAIT,OAAO,CAACM,OAAO,CAAE,CACnBC,YAAY,CAACP,OAAO,CAACM,OAAO,CAAC,CAC/B,CACAI,QAAQ,CAACE,mBAAmB,CAAC,OAAO,CAAEH,kBAAkB,CAAC,CAC3D,CAAC,CACH,CAAC,CAAE,CAACV,YAAY,CAAEF,QAAQ,CAAEG,OAAO,CAAC,CAAC,CAErC;AACAlB,SAAS,CAAC,IAAM,CACd;AACA,GAAI,CAACgB,SAAS,CAAE,CACdD,QAAQ,CAAC,GAAG,CAAC,CACf,CACF,CAAC,CAAE,CAACC,SAAS,CAAED,QAAQ,CAAC,CAAC,CAEzBf,SAAS,CAAC,IAAMmB,cAAc,CAAC,CAAC,CAAE,CAACA,cAAc,CAAC,CAAC,CAEnD;AAEA,mBACER,IAAA,CAAAE,SAAA,EAAAkB,QAAA,CACEV,OAAO,cACLV,IAAA,CAACL,MAAM,EAAC0B,CAAC,CAAC,OAAO,CAAAD,QAAA,cACfpB,IAAA,CAACR,OAAO,GAAE,CAAC,CACL,CAAC,cAEXQ,IAAA,CAACP,IAAI,EAAC6B,CAAC,CAAE,CAAEC,IAAI,CAAE,CAAC,CAAEC,EAAE,CAAE,EAAG,CAAE,CAAAJ,QAAA,CACxBX,WAAW,CAACgB,GAAG,CAAEC,UAAU,eAC1B1B,IAAA,CAACN,QAAQ,EAAqBiC,EAAE,CAAC,MAAM,CAAAP,QAAA,cACrCpB,IAAA,CAACF,cAAc,EACb8B,EAAE,CAAEF,UAAU,CAACE,EAAG,CAClBC,OAAO,CAAEH,UAAU,CAACI,IAAK,CACzBC,IAAI,CAAEL,UAAU,CAACK,IAClB;AAAA,CACA,CAAC,EANWL,UAAU,CAACE,EAOhB,CACX,CAAC,CACE,CACP,CACD,CAAC,CAEP,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}