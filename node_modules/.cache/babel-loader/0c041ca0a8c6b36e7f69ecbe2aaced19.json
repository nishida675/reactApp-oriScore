{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Popover: () => Popover,\n  PopoverAnchor: () => PopoverAnchor,\n  PopoverArrow: () => PopoverArrow,\n  PopoverBody: () => PopoverBody,\n  PopoverCloseButton: () => PopoverCloseButton,\n  PopoverContent: () => PopoverContent,\n  PopoverFooter: () => PopoverFooter,\n  PopoverHeader: () => PopoverHeader,\n  PopoverTrigger: () => PopoverTrigger,\n  usePopover: () => usePopover,\n  usePopoverContext: () => usePopoverContext,\n  usePopoverStyles: () => usePopoverStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/popover.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\n\n// src/popover-context.ts\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar [PopoverProvider, usePopoverContext] = (0, import_react_context.createContext)({\n  name: \"PopoverContext\",\n  errorMessage: \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\"\n});\nvar [PopoverStylesProvider, usePopoverStyles] = (0, import_react_context.createContext)({\n  name: `PopoverStylesContext`,\n  errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Popover />\" `\n});\n\n// src/use-popover.ts\nvar import_react_use_animation_state = require(\"@chakra-ui/react-use-animation-state\");\nvar import_react_use_focus_on_pointer_down = require(\"@chakra-ui/react-use-focus-on-pointer-down\");\nvar import_react_use_focus_effect = require(\"@chakra-ui/react-use-focus-effect\");\nvar import_react_use_disclosure = require(\"@chakra-ui/react-use-disclosure\");\nvar import_popper = require(\"@chakra-ui/popper\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_lazy_utils = require(\"@chakra-ui/lazy-utils\");\nvar import_react = require(\"react\");\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nfunction usePopover(props = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props;\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = (0, import_react_use_disclosure.useDisclosure)(props);\n  const anchorRef = (0, import_react.useRef)(null);\n  const triggerRef = (0, import_react.useRef)(null);\n  const popoverRef = (0, import_react.useRef)(null);\n  const isHoveringRef = (0, import_react.useRef)(false);\n  const hasBeenOpened = (0, import_react.useRef)(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  const [hasHeader, setHasHeader] = (0, import_react.useState)(false);\n  const [hasBody, setHasBody] = (0, import_react.useState)(false);\n  const uuid = (0, import_react.useId)();\n  const uid = id != null ? id : uuid;\n  const [triggerId, popoverId, headerId, bodyId] = [\"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"].map(id2 => `${id2}-${uid}`);\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = (0, import_popper.usePopper)({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount\n  });\n  const animated = (0, import_react_use_animation_state.useAnimationState)({\n    isOpen,\n    ref: popoverRef\n  });\n  (0, import_react_use_focus_on_pointer_down.useFocusOnPointerDown)({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  (0, import_react_use_focus_effect.useFocusOnHide)(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  (0, import_react_use_focus_effect.useFocusOnShow)(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  const shouldRenderChildren = (0, import_lazy_utils.lazyDisclosure)({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  const getPopoverProps = (0, import_react.useCallback)((props2 = {}, _ref = null) => {\n    const popoverProps = {\n      ...props2,\n      style: {\n        ...props2.style,\n        transformOrigin: import_popper.popperCSSVars.transformOrigin.varRef,\n        [import_popper.popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [import_popper.popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      },\n      ref: (0, import_react_use_merge_refs.mergeRefs)(popoverRef, _ref),\n      children: shouldRenderChildren ? props2.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const targetIsPopover = contains(popoverRef.current, relatedTarget);\n        const targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        const isValidBlur = !targetIsPopover && !targetIsTrigger;\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : void 0,\n      \"aria-describedby\": hasBody ? bodyId : void 0\n    };\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = (0, import_shared_utils.callAllHandlers)(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = (0, import_shared_utils.callAllHandlers)(props2.onMouseLeave, event => {\n        if (event.nativeEvent.relatedTarget === null) {\n          return;\n        }\n        isHoveringRef.current = false;\n        setTimeout(() => onClose(), closeDelay);\n      });\n    }\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);\n  const getPopoverPositionerProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => getPopperProps({\n    ...props2,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props2.style\n    }\n  }, forwardedRef), [isOpen, getPopperProps]);\n  const getAnchorProps = (0, import_react.useCallback)((props2, _ref = null) => {\n    return {\n      ...props2,\n      // If anchor is rendered, it is used as reference.\n      ref: (0, import_react_use_merge_refs.mergeRefs)(_ref, anchorRef, referenceRef)\n    };\n  }, [anchorRef, referenceRef]);\n  const openTimeout = (0, import_react.useRef)();\n  const closeTimeout = (0, import_react.useRef)();\n  const maybeReferenceRef = (0, import_react.useCallback)(node => {\n    if (anchorRef.current == null) {\n      referenceRef(node);\n    }\n  }, [referenceRef]);\n  const getTriggerProps = (0, import_react.useCallback)((props2 = {}, _ref = null) => {\n    const triggerProps = {\n      ...props2,\n      ref: (0, import_react_use_merge_refs.mergeRefs)(triggerRef, _ref, maybeReferenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    };\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = (0, import_shared_utils.callAllHandlers)(props2.onClick, onToggle);\n    }\n    if (trigger === TRIGGER.hover) {\n      triggerProps.onFocus = (0, import_shared_utils.callAllHandlers)(props2.onFocus, () => {\n        if (openTimeout.current === void 0) {\n          onOpen();\n        }\n      });\n      triggerProps.onBlur = (0, import_shared_utils.callAllHandlers)(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const isValidBlur = !contains(popoverRef.current, relatedTarget);\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      });\n      triggerProps.onKeyDown = (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = (0, import_shared_utils.callAllHandlers)(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(() => onOpen(), openDelay);\n      });\n      triggerProps.onMouseLeave = (0, import_shared_utils.callAllHandlers)(props2.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);\n  (0, import_react.useEffect)(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  const getHeaderProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    id: headerId,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, node => {\n      setHasHeader(!!node);\n    })\n  }), [headerId]);\n  const getBodyProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    id: bodyId,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, node => {\n      setHasBody(!!node);\n    })\n  }), [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}\nfunction contains(parent, child) {\n  return parent === child || (parent == null ? void 0 : parent.contains(child));\n}\nfunction getRelatedTarget(event) {\n  var _a;\n  const activeEl = event.currentTarget.ownerDocument.activeElement;\n  return (_a = event.relatedTarget) != null ? _a : activeEl;\n}\n\n// src/popover.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction Popover(props) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Popover\", props);\n  const {\n    children,\n    ...rest\n  } = (0, import_system.omitThemingProps)(props);\n  const theme = (0, import_system.useTheme)();\n  const context = usePopover({\n    ...rest,\n    direction: theme.direction\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopoverProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopoverStylesProvider, {\n      value: styles,\n      children: (0, import_shared_utils2.runIfFn)(children, {\n        isOpen: context.isOpen,\n        onClose: context.onClose,\n        forceUpdate: context.forceUpdate\n      })\n    })\n  });\n}\nPopover.displayName = \"Popover\";\n\n// src/popover-anchor.tsx\nvar import_react2 = require(\"react\");\nfunction PopoverAnchor(props) {\n  const child = import_react2.Children.only(props.children);\n  const {\n    getAnchorProps\n  } = usePopoverContext();\n  return (0, import_react2.cloneElement)(child, getAnchorProps(child.props, child.ref));\n}\nPopoverAnchor.displayName = \"PopoverAnchor\";\n\n// src/popover-arrow.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar resolveVar = (scale, value) => value ? `${scale}.${value}, ${value}` : void 0;\nfunction PopoverArrow(props) {\n  var _a;\n  const {\n    bg,\n    bgColor,\n    backgroundColor,\n    shadow,\n    boxShadow,\n    shadowColor\n  } = props;\n  const {\n    getArrowProps,\n    getArrowInnerProps\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  const arrowBg = (_a = bg != null ? bg : bgColor) != null ? _a : backgroundColor;\n  const arrowShadow = shadow != null ? shadow : boxShadow;\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, {\n    ...getArrowProps(),\n    className: \"chakra-popover__arrow-positioner\",\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, {\n      className: (0, import_shared_utils3.cx)(\"chakra-popover__arrow\", props.className),\n      ...getArrowInnerProps(props),\n      __css: {\n        \"--popper-arrow-shadow-color\": resolveVar(\"colors\", shadowColor),\n        \"--popper-arrow-bg\": resolveVar(\"colors\", arrowBg),\n        \"--popper-arrow-shadow\": resolveVar(\"shadows\", arrowShadow),\n        ...styles.arrow\n      }\n    })\n  });\n}\nPopoverArrow.displayName = \"PopoverArrow\";\n\n// src/popover-body.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar PopoverBody = (0, import_system3.forwardRef)(function PopoverBody2(props, ref) {\n  const {\n    getBodyProps\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.div, {\n    ...getBodyProps(props, ref),\n    className: (0, import_shared_utils4.cx)(\"chakra-popover__body\", props.className),\n    __css: styles.body\n  });\n});\nPopoverBody.displayName = \"PopoverBody\";\n\n// src/popover-close-button.tsx\nvar import_close_button = require(\"@chakra-ui/close-button\");\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar PopoverCloseButton = (0, import_system4.forwardRef)(function PopoverCloseButton2(props, ref) {\n  const {\n    onClose\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_close_button.CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    className: (0, import_shared_utils5.cx)(\"chakra-popover__close-btn\", props.className),\n    __css: styles.closeButton,\n    ref,\n    ...props\n  });\n});\nPopoverCloseButton.displayName = \"PopoverCloseButton\";\n\n// src/popover-content.tsx\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_system6 = require(\"@chakra-ui/system\");\n\n// src/popover-transition.tsx\nvar import_system5 = require(\"@chakra-ui/system\");\nvar import_framer_motion = require(\"framer-motion\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nfunction mergeVariants(variants) {\n  if (!variants) return;\n  return {\n    enter: {\n      ...variants.enter,\n      visibility: \"visible\"\n    },\n    exit: {\n      ...variants.exit,\n      transitionEnd: {\n        visibility: \"hidden\"\n      }\n    }\n  };\n}\nvar scaleFade = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    }\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\nvar MotionSection = (0, import_system5.chakra)(import_framer_motion.motion.section);\nvar PopoverTransition = (0, import_system5.forwardRef)(function PopoverTransition2(props, ref) {\n  const {\n    variants = scaleFade,\n    ...rest\n  } = props;\n  const {\n    isOpen\n  } = usePopoverContext();\n  return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(MotionSection, {\n    ref,\n    variants: mergeVariants(variants),\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\",\n    ...rest\n  });\n});\nPopoverTransition.displayName = \"PopoverTransition\";\n\n// src/popover-content.tsx\nvar import_jsx_runtime6 = require(\"react/jsx-runtime\");\nvar PopoverContent = (0, import_system6.forwardRef)(function PopoverContent2(props, ref) {\n  const {\n    rootProps,\n    motionProps,\n    ...contentProps\n  } = props;\n  const {\n    getPopoverProps,\n    getPopoverPositionerProps,\n    onAnimationComplete\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  const contentStyles = {\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ...styles.content\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime6.jsx)(import_system6.chakra.div, {\n    ...getPopoverPositionerProps(rootProps),\n    __css: styles.popper,\n    className: \"chakra-popover__popper\",\n    children: /* @__PURE__ */(0, import_jsx_runtime6.jsx)(PopoverTransition, {\n      ...motionProps,\n      ...getPopoverProps(contentProps, ref),\n      onAnimationComplete: (0, import_shared_utils6.callAll)(onAnimationComplete, contentProps.onAnimationComplete),\n      className: (0, import_shared_utils6.cx)(\"chakra-popover__content\", props.className),\n      __css: contentStyles\n    })\n  });\n});\nPopoverContent.displayName = \"PopoverContent\";\n\n// src/popover-footer.tsx\nvar import_system7 = require(\"@chakra-ui/system\");\nvar import_shared_utils7 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime7 = require(\"react/jsx-runtime\");\nfunction PopoverFooter(props) {\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime7.jsx)(import_system7.chakra.footer, {\n    ...props,\n    className: (0, import_shared_utils7.cx)(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  });\n}\nPopoverFooter.displayName = \"PopoverFooter\";\n\n// src/popover-header.tsx\nvar import_system8 = require(\"@chakra-ui/system\");\nvar import_shared_utils8 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime8 = require(\"react/jsx-runtime\");\nvar PopoverHeader = (0, import_system8.forwardRef)(function PopoverHeader2(props, ref) {\n  const {\n    getHeaderProps\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime8.jsx)(import_system8.chakra.header, {\n    ...getHeaderProps(props, ref),\n    className: (0, import_shared_utils8.cx)(\"chakra-popover__header\", props.className),\n    __css: styles.header\n  });\n});\nPopoverHeader.displayName = \"PopoverHeader\";\n\n// src/popover-trigger.tsx\nvar import_react3 = require(\"react\");\nfunction PopoverTrigger(props) {\n  const child = import_react3.Children.only(props.children);\n  const {\n    getTriggerProps\n  } = usePopoverContext();\n  return (0, import_react3.cloneElement)(child, getTriggerProps(child.props, child.ref));\n}\nPopoverTrigger.displayName = \"PopoverTrigger\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Popover,\n  PopoverAnchor,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverFooter,\n  PopoverHeader,\n  PopoverTrigger,\n  usePopover,\n  usePopoverContext,\n  usePopoverStyles\n});","map":null,"metadata":{},"sourceType":"script"}