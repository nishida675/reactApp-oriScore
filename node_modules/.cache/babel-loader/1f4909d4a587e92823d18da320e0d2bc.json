{"ast":null,"code":"var _jsxFileName = \"/Users/nishidanaoto/ateori-app/src/components/pages/RankingPage.tsx\";\nimport { memo, useContext, useEffect, useRef } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { Spinner, Wrap, WrapItem, Center } from \"@chakra-ui/react\";\nimport { LoginUserContext } from '../../providers/LoginUserProvider';\nimport { useRankingAllUsers } from \"../../hooks/rankingAllUsers\";\nimport { RankingCard } from \"../organisms/ranking/rankingCard\";\nexport const RankingPage = memo(() => {\n  console.log(\"RankingPage rendered\");\n  const {\n    loginUser,\n    setLoginUser\n  } = useContext(LoginUserContext);\n  const timerId = useRef(null);\n  const navigate = useNavigate();\n  const {\n    getRankings,\n    users,\n    loading,\n    error\n  } = useRankingAllUsers();\n\n  // 自動ログアウトの時間（ミリ秒）\n  const autoLogoutTime = 600000; // 10分\n  //const autoLogoutTime = 10000; // 10秒\n\n  useEffect(() => {\n    const resetTimer = () => {\n      // タイマーをリセット\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n\n      // 新たなタイマーをセット\n      timerId.current = setTimeout(() => {\n        // ログアウト処理（例: setLoginUser(null)）\n        setLoginUser(null);\n\n        // トップページにリダイレクト\n        navigate('/');\n      }, autoLogoutTime);\n    };\n\n    // ユーザーがアクションを起こすたびにタイマーをリセット\n    const resetTimerOnAction = () => {\n      resetTimer();\n    };\n\n    // 初回実行時にタイマーをセット\n    resetTimer();\n\n    // ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\n    document.addEventListener('click', resetTimerOnAction);\n    return () => {\n      // コンポーネントがアンマウントされたときにクリア\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n      document.removeEventListener('click', resetTimerOnAction);\n    };\n  }, [setLoginUser, navigate, timerId]);\n\n  // loginUserが存在するかどうかのチェック\n  useEffect(() => {\n    // loginUserが存在しない場合、トップページに遷移\n    if (!loginUser) {\n      navigate('/');\n    }\n  }, [loginUser, navigate]);\n  useEffect(() => {\n    console.log(\"useEffect is called\");\n    const fetchData = async () => {\n      getRankings();\n    };\n    fetchData();\n  }, [getRankings]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"\\u30E9\\u30F3\\u30AD\\u30F3\\u30B0\"), loading ? /*#__PURE__*/React.createElement(Center, {\n    h: \"100vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })) : error ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, error)) : /*#__PURE__*/React.createElement(Wrap, {\n    p: {\n      base: 4,\n      md: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, users.map(user => /*#__PURE__*/React.createElement(WrapItem, {\n    key: user.rank,\n    mx: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RankingCard, {\n    rank: user.rank,\n    userName: user.name,\n    count: user.count,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  })))));\n});","map":{"version":3,"names":["memo","useContext","useEffect","useRef","useNavigate","Spinner","Wrap","WrapItem","Center","LoginUserContext","useRankingAllUsers","RankingCard","RankingPage","console","log","loginUser","setLoginUser","timerId","navigate","getRankings","users","loading","error","autoLogoutTime","resetTimer","current","clearTimeout","setTimeout","resetTimerOnAction","document","addEventListener","removeEventListener","fetchData","React","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","h","style","color","p","base","md","map","user","key","rank","mx","userName","name","count"],"sources":["/Users/nishidanaoto/ateori-app/src/components/pages/RankingPage.tsx"],"sourcesContent":["import {memo, useContext, useEffect, useRef } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Spinner,\n  Wrap,\n  WrapItem,\n  Center,\n} from \"@chakra-ui/react\";\n\nimport { LoginUserContext } from '../../providers/LoginUserProvider';\nimport {useRankingAllUsers } from \"../../hooks/rankingAllUsers\";\nimport { RankingCard } from \"../organisms/ranking/rankingCard\";\nimport { User } from \"../../types/api/user\";\n\nexport const RankingPage = memo(() =>{\n  console.log(\"RankingPage rendered\");\n  const { loginUser, setLoginUser } = useContext(LoginUserContext);\n  const timerId = useRef<NodeJS.Timeout | null>(null);\n  const navigate = useNavigate();\n  const { getRankings, users, loading, error } = useRankingAllUsers();\n\n\n  // 自動ログアウトの時間（ミリ秒）\n  const autoLogoutTime = 600000; // 10分\n  //const autoLogoutTime = 10000; // 10秒\n\n  useEffect(() => {\n    const resetTimer = () => {\n      // タイマーをリセット\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n\n      // 新たなタイマーをセット\n      timerId.current = setTimeout(() => {\n        // ログアウト処理（例: setLoginUser(null)）\n        setLoginUser(null);\n\n        // トップページにリダイレクト\n        navigate('/');\n      }, autoLogoutTime);\n    };\n\n    // ユーザーがアクションを起こすたびにタイマーをリセット\n    const resetTimerOnAction = () => {\n      resetTimer();\n    };\n\n    // 初回実行時にタイマーをセット\n    resetTimer();\n\n    // ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\n    document.addEventListener('click', resetTimerOnAction);\n\n    return () => {\n      // コンポーネントがアンマウントされたときにクリア\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n      document.removeEventListener('click', resetTimerOnAction);\n    };    \n  }, [setLoginUser, navigate, timerId]);\n\n   // loginUserが存在するかどうかのチェック\n   useEffect(() => {\n    // loginUserが存在しない場合、トップページに遷移\n    if (!loginUser) {\n      navigate('/');\n    }\n  }, [loginUser, navigate]);\n\n  useEffect(() => {\n    console.log(\"useEffect is called\");\n    const fetchData = async () => {\n      getRankings();\n    };\n    fetchData();\n  \n  }, [getRankings]);\n  \n  \n  return (\n    <>\n      <p>ランキング</p>\n      {loading ? (\n        <Center h=\"100vh\">\n          <Spinner />\n        </Center>\n      ) : error ? (\n        <>\n          <div style={{ color: \"red\" }}>{error}</div>\n        </>\n      ) : (\n        <Wrap p={{ base: 4, md: 10 }}>\n          {users.map((user: User) => (\n            <WrapItem key={user.rank} mx=\"auto\">\n              <RankingCard rank={user.rank} userName={user.name} count={user.count} />\n            </WrapItem>\n          ))}\n        </Wrap>\n      )}\n    </>\n  )});"],"mappings":"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"},"metadata":{},"sourceType":"module"}