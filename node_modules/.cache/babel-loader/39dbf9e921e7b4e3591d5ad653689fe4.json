{"ast":null,"code":"'use client';\n\nimport { usePortalManager } from \"./chunk-HK66PB7M.mjs\";\n\n// src/portal.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { createPortal } from \"react-dom\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\nvar PORTAL_CLASSNAME = \"chakra-portal\";\nvar PORTAL_SELECTOR = `.chakra-portal`;\nvar Container = props => /* @__PURE__ */jsx(\"div\", {\n  className: \"chakra-portal-zIndex\",\n  style: {\n    position: \"absolute\",\n    zIndex: props.zIndex,\n    top: 0,\n    left: 0,\n    right: 0\n    // NB: Don't add `bottom: 0`, it makes the entire app unusable\n    // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n  },\n\n  children: props.children\n});\nvar DefaultPortal = props => {\n  const {\n    appendToParentPortal,\n    children\n  } = props;\n  const [tempNode, setTempNode] = useState(null);\n  const portal = useRef(null);\n  const [, forceUpdate] = useState({});\n  useEffect(() => forceUpdate({}), []);\n  const parentPortal = usePortalContext();\n  const manager = usePortalManager();\n  useSafeLayoutEffect(() => {\n    if (!tempNode) return;\n    const doc = tempNode.ownerDocument;\n    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;\n    if (!host) return;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = PORTAL_CLASSNAME;\n    host.appendChild(portal.current);\n    forceUpdate({});\n    const portalNode = portal.current;\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, [tempNode]);\n  const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */jsx(Container, {\n    zIndex: manager == null ? void 0 : manager.zIndex,\n    children\n  }) : children;\n  return portal.current ? createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n    value: portal.current,\n    children: _children\n  }), portal.current) : /* @__PURE__ */jsx(\"span\", {\n    ref: el => {\n      if (el) setTempNode(el);\n    }\n  });\n};\nvar ContainerPortal = props => {\n  const {\n    children,\n    containerRef,\n    appendToParentPortal\n  } = props;\n  const containerEl = containerRef.current;\n  const host = containerEl != null ? containerEl : typeof window !== \"undefined\" ? document.body : void 0;\n  const portal = useMemo(() => {\n    const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement(\"div\");\n    if (node) node.className = PORTAL_CLASSNAME;\n    return node;\n  }, [containerEl]);\n  const [, forceUpdate] = useState({});\n  useSafeLayoutEffect(() => forceUpdate({}), []);\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return;\n    host.appendChild(portal);\n    return () => {\n      host.removeChild(portal);\n    };\n  }, [portal, host]);\n  if (host && portal) {\n    return createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n      value: appendToParentPortal ? portal : null,\n      children\n    }), portal);\n  }\n  return null;\n};\nfunction Portal(props) {\n  const portalProps = {\n    appendToParentPortal: true,\n    ...props\n  };\n  const {\n    containerRef,\n    ...rest\n  } = portalProps;\n  return containerRef ? /* @__PURE__ */jsx(ContainerPortal, {\n    containerRef,\n    ...rest\n  }) : /* @__PURE__ */jsx(DefaultPortal, {\n    ...rest\n  });\n}\nPortal.className = PORTAL_CLASSNAME;\nPortal.selector = PORTAL_SELECTOR;\nPortal.displayName = \"Portal\";\nexport { Portal };","map":null,"metadata":{},"sourceType":"module"}