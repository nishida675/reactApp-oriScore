{"ast":null,"code":"import{memo,useContext,useEffect,useRef}from\"react\";import{useNavigate}from'react-router-dom';import{Spinner,Wrap,WrapItem,Center}from\"@chakra-ui/react\";import{LoginUserContext}from'../../providers/LoginUserProvider';import{useRankingAllUsers}from\"../../hooks/rankingAllUsers\";import{RankingCard}from\"../organisms/ranking/rankingCard\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const RankingPage=/*#__PURE__*/memo(()=>{console.log(\"RankingPage rendered\");const{loginUser,setLoginUser}=useContext(LoginUserContext);const timerId=useRef(null);const navigate=useNavigate();const{getRankings,users,loading,error}=useRankingAllUsers();// 自動ログアウトの時間（ミリ秒）\nconst autoLogoutTime=600000;// 10分\n//const autoLogoutTime = 10000; // 10秒\nuseEffect(()=>{const resetTimer=()=>{// タイマーをリセット\nif(timerId.current){clearTimeout(timerId.current);}// 新たなタイマーをセット\ntimerId.current=setTimeout(()=>{// ログアウト処理（例: setLoginUser(null)）\nsetLoginUser(null);// トップページにリダイレクト\nnavigate('/');},autoLogoutTime);};// ユーザーがアクションを起こすたびにタイマーをリセット\nconst resetTimerOnAction=()=>{resetTimer();};// 初回実行時にタイマーをセット\nresetTimer();// ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\ndocument.addEventListener('click',resetTimerOnAction);return()=>{// コンポーネントがアンマウントされたときにクリア\nif(timerId.current){clearTimeout(timerId.current);}document.removeEventListener('click',resetTimerOnAction);};},[setLoginUser,navigate,timerId]);// loginUserが存在するかどうかのチェック\nuseEffect(()=>{// loginUserが存在しない場合、トップページに遷移\nif(!loginUser){navigate('/');}},[loginUser,navigate]);useEffect(()=>{console.log(\"useEffect is called\");const fetchData=async()=>{getRankings();};fetchData();},[getRankings]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u30E9\\u30F3\\u30AD\\u30F3\\u30B0\"}),loading?/*#__PURE__*/_jsx(Center,{h:\"100vh\",children:/*#__PURE__*/_jsx(Spinner,{})}):error?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{style:{color:\"red\"},children:error})}):/*#__PURE__*/_jsx(Wrap,{p:{base:4,md:10},children:users.map(user=>/*#__PURE__*/_jsx(WrapItem,{mx:\"auto\",children:/*#__PURE__*/_jsx(RankingCard,{rank:user.rank,userName:user.name,count:user.count})},user.rank))})]});});","map":{"version":3,"names":["memo","useContext","useEffect","useRef","useNavigate","Spinner","Wrap","WrapItem","Center","LoginUserContext","useRankingAllUsers","RankingCard","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","RankingPage","console","log","loginUser","setLoginUser","timerId","navigate","getRankings","users","loading","error","autoLogoutTime","resetTimer","current","clearTimeout","setTimeout","resetTimerOnAction","document","addEventListener","removeEventListener","fetchData","children","h","style","color","p","base","md","map","user","mx","rank","userName","name","count"],"sources":["/Users/nishidanaoto/ateori-app/src/components/pages/RankingPage.tsx"],"sourcesContent":["import {memo, useContext, useEffect, useRef } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Spinner,\n  Wrap,\n  WrapItem,\n  Center,\n} from \"@chakra-ui/react\";\n\nimport { LoginUserContext } from '../../providers/LoginUserProvider';\nimport {useRankingAllUsers } from \"../../hooks/rankingAllUsers\";\nimport { RankingCard } from \"../organisms/ranking/rankingCard\";\nimport { User } from \"../../types/api/user\";\n\nexport const RankingPage = memo(() =>{\n  console.log(\"RankingPage rendered\");\n  const { loginUser, setLoginUser } = useContext(LoginUserContext);\n  const timerId = useRef<NodeJS.Timeout | null>(null);\n  const navigate = useNavigate();\n  const { getRankings, users, loading, error } = useRankingAllUsers();\n\n\n  // 自動ログアウトの時間（ミリ秒）\n  const autoLogoutTime = 600000; // 10分\n  //const autoLogoutTime = 10000; // 10秒\n\n  useEffect(() => {\n    const resetTimer = () => {\n      // タイマーをリセット\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n\n      // 新たなタイマーをセット\n      timerId.current = setTimeout(() => {\n        // ログアウト処理（例: setLoginUser(null)）\n        setLoginUser(null);\n\n        // トップページにリダイレクト\n        navigate('/');\n      }, autoLogoutTime);\n    };\n\n    // ユーザーがアクションを起こすたびにタイマーをリセット\n    const resetTimerOnAction = () => {\n      resetTimer();\n    };\n\n    // 初回実行時にタイマーをセット\n    resetTimer();\n\n    // ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\n    document.addEventListener('click', resetTimerOnAction);\n\n    return () => {\n      // コンポーネントがアンマウントされたときにクリア\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n      document.removeEventListener('click', resetTimerOnAction);\n    };    \n  }, [setLoginUser, navigate, timerId]);\n\n   // loginUserが存在するかどうかのチェック\n   useEffect(() => {\n    // loginUserが存在しない場合、トップページに遷移\n    if (!loginUser) {\n      navigate('/');\n    }\n  }, [loginUser, navigate]);\n\n  useEffect(() => {\n    console.log(\"useEffect is called\");\n    const fetchData = async () => {\n      getRankings();\n    };\n    fetchData();\n  \n  }, [getRankings]);\n  \n  \n  return (\n    <>\n      <p>ランキング</p>\n      {loading ? (\n        <Center h=\"100vh\">\n          <Spinner />\n        </Center>\n      ) : error ? (\n        <>\n          <div style={{ color: \"red\" }}>{error}</div>\n        </>\n      ) : (\n        <Wrap p={{ base: 4, md: 10 }}>\n          {users.map((user: User) => (\n            <WrapItem key={user.rank} mx=\"auto\">\n              <RankingCard rank={user.rank} userName={user.name} count={user.count} />\n            </WrapItem>\n          ))}\n        </Wrap>\n      )}\n    </>\n  )});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}