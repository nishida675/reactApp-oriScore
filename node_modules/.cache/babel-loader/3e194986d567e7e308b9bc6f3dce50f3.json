{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Accordion: () => Accordion,\n  AccordionButton: () => AccordionButton,\n  AccordionIcon: () => AccordionIcon,\n  AccordionItem: () => AccordionItem,\n  AccordionPanel: () => AccordionPanel,\n  AccordionProvider: () => AccordionProvider,\n  useAccordion: () => useAccordion,\n  useAccordionContext: () => useAccordionContext,\n  useAccordionItem: () => useAccordionItem,\n  useAccordionItemState: () => useAccordionItemState,\n  useAccordionStyles: () => useAccordionStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/accordion.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react2 = require(\"react\");\n\n// src/accordion-context.ts\nvar import_descendant = require(\"@chakra-ui/descendant\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar [AccordionStylesProvider, useAccordionStyles] = (0, import_react_context.createContext)({\n  name: \"AccordionStylesContext\",\n  hookName: \"useAccordionStyles\",\n  providerName: \"<Accordion />\"\n});\nvar [AccordionItemProvider, useAccordionItemContext] = (0, import_react_context.createContext)({\n  name: \"AccordionItemContext\",\n  hookName: \"useAccordionItemContext\",\n  providerName: \"<AccordionItem />\"\n});\nvar [AccordionDescendantsProvider, useAccordionDescendantsContext, useAccordionDescendants, useAccordionDescendant] = (0, import_descendant.createDescendantContext)();\n\n// src/use-accordion.ts\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react = require(\"react\");\nfunction useAccordion(props) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    ...htmlProps\n  } = props;\n  allowMultipleWarning(props);\n  allowMultipleAndAllowToggleWarning(props);\n  const descendants = useAccordionDescendants();\n  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(-1);\n  (0, import_react.useEffect)(() => {\n    return () => {\n      setFocusedIndex(-1);\n    };\n  }, []);\n  const [index, setIndex] = (0, import_react_use_controllable_state.useControllableState)({\n    value: indexProp,\n    defaultValue() {\n      if (allowMultiple) return defaultIndex != null ? defaultIndex : [];\n      return defaultIndex != null ? defaultIndex : -1;\n    },\n    onChange\n  });\n  const getAccordionItemProps = idx => {\n    let isOpen = false;\n    if (idx !== null) {\n      isOpen = Array.isArray(index) ? index.includes(idx) : index === idx;\n    }\n    const onChange2 = isOpen2 => {\n      if (idx === null) return;\n      if (allowMultiple && Array.isArray(index)) {\n        const nextState = isOpen2 ? index.concat(idx) : index.filter(i => i !== idx);\n        setIndex(nextState);\n      } else if (isOpen2) {\n        setIndex(idx);\n      } else if (allowToggle) {\n        setIndex(-1);\n      }\n    };\n    return {\n      isOpen,\n      onChange: onChange2\n    };\n  };\n  return {\n    index,\n    setIndex,\n    htmlProps,\n    getAccordionItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    descendants\n  };\n}\nvar [AccordionProvider, useAccordionContext] = (0, import_react_context2.createContext)({\n  name: \"AccordionContext\",\n  hookName: \"useAccordionContext\",\n  providerName: \"Accordion\"\n});\nfunction useAccordionItem(props) {\n  const {\n    isDisabled,\n    isFocusable,\n    id,\n    ...htmlProps\n  } = props;\n  const {\n    getAccordionItemProps,\n    setFocusedIndex\n  } = useAccordionContext();\n  const buttonRef = (0, import_react.useRef)(null);\n  const reactId = (0, import_react.useId)();\n  const uid = id != null ? id : reactId;\n  const buttonId = `accordion-button-${uid}`;\n  const panelId = `accordion-panel-${uid}`;\n  focusableNotDisabledWarning(props);\n  const {\n    register,\n    index,\n    descendants\n  } = useAccordionDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  const {\n    isOpen,\n    onChange\n  } = getAccordionItemProps(index === -1 ? null : index);\n  warnIfOpenAndDisabled({\n    isOpen,\n    isDisabled\n  });\n  const onOpen = () => {\n    onChange == null ? void 0 : onChange(true);\n  };\n  const onClose = () => {\n    onChange == null ? void 0 : onChange(false);\n  };\n  const onClick = (0, import_react.useCallback)(() => {\n    onChange == null ? void 0 : onChange(!isOpen);\n    setFocusedIndex(index);\n  }, [index, setFocusedIndex, isOpen, onChange]);\n  const onKeyDown = (0, import_react.useCallback)(event => {\n    const keyMap = {\n      ArrowDown: () => {\n        const next = descendants.nextEnabled(index);\n        next == null ? void 0 : next.node.focus();\n      },\n      ArrowUp: () => {\n        const prev = descendants.prevEnabled(index);\n        prev == null ? void 0 : prev.node.focus();\n      },\n      Home: () => {\n        const first = descendants.firstEnabled();\n        first == null ? void 0 : first.node.focus();\n      },\n      End: () => {\n        const last = descendants.lastEnabled();\n        last == null ? void 0 : last.node.focus();\n      }\n    };\n    const action = keyMap[event.key];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, index]);\n  const onFocus = (0, import_react.useCallback)(() => {\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index]);\n  const getButtonProps = (0, import_react.useCallback)(function getButtonProps2(props2 = {}, ref = null) {\n    return {\n      ...props2,\n      type: \"button\",\n      ref: (0, import_react_use_merge_refs.mergeRefs)(register, buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onClick),\n      onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onFocus),\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown)\n    };\n  }, [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId, register]);\n  const getPanelProps = (0, import_react.useCallback)(function getPanelProps2(props2 = {}, ref = null) {\n    return {\n      ...props2,\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen\n    };\n  }, [buttonId, isOpen, panelId]);\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps\n  };\n}\nfunction allowMultipleWarning(props) {\n  const index = props.index || props.defaultIndex;\n  const condition = index != null && !Array.isArray(index) && props.allowMultiple;\n  (0, import_shared_utils.warn)({\n    condition: !!condition,\n    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`\n  });\n}\nfunction allowMultipleAndAllowToggleWarning(props) {\n  (0, import_shared_utils.warn)({\n    condition: !!(props.allowMultiple && props.allowToggle),\n    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`\n  });\n}\nfunction focusableNotDisabledWarning(props) {\n  (0, import_shared_utils.warn)({\n    condition: !!(props.isFocusable && !props.isDisabled),\n    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    `\n  });\n}\nfunction warnIfOpenAndDisabled(props) {\n  (0, import_shared_utils.warn)({\n    condition: props.isOpen && !!props.isDisabled,\n    message: \"Cannot open a disabled accordion item\"\n  });\n}\n\n// src/accordion.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar Accordion = (0, import_system.forwardRef)(function Accordion2({\n  children,\n  reduceMotion,\n  ...props\n}, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Accordion\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const {\n    htmlProps,\n    descendants,\n    ...context\n  } = useAccordion(ownProps);\n  const ctx = (0, import_react2.useMemo)(() => ({\n    ...context,\n    reduceMotion: !!reduceMotion\n  }), [context, reduceMotion]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionProvider, {\n      value: ctx,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionStylesProvider, {\n        value: styles,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n          ref,\n          ...htmlProps,\n          className: (0, import_shared_utils2.cx)(\"chakra-accordion\", props.className),\n          __css: styles.root,\n          children\n        })\n      })\n    })\n  });\n});\nAccordion.displayName = \"Accordion\";\n\n// src/accordion-button.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar AccordionButton = (0, import_system2.forwardRef)(function AccordionButton2(props, ref) {\n  const {\n    getButtonProps\n  } = useAccordionItemContext();\n  const buttonProps = getButtonProps(props, ref);\n  const styles = useAccordionStyles();\n  const buttonStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    outline: 0,\n    ...styles.button\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.button, {\n    ...buttonProps,\n    className: (0, import_shared_utils3.cx)(\"chakra-accordion__button\", props.className),\n    __css: buttonStyles\n  });\n});\nAccordionButton.displayName = \"AccordionButton\";\n\n// src/accordion-icon.tsx\nvar import_icon = require(\"@chakra-ui/icon\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nfunction AccordionIcon(props) {\n  const {\n    isOpen,\n    isDisabled\n  } = useAccordionItemContext();\n  const {\n    reduceMotion\n  } = useAccordionContext();\n  const _className = (0, import_shared_utils4.cx)(\"chakra-accordion__icon\", props.className);\n  const styles = useAccordionStyles();\n  const iconStyles = {\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : void 0,\n    transition: reduceMotion ? void 0 : \"transform 0.2s\",\n    transformOrigin: \"center\",\n    ...styles.icon\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_icon.Icon, {\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": true,\n    className: _className,\n    __css: iconStyles,\n    ...props,\n    children: /* @__PURE__ */(0, import_jsx_runtime3.jsx)(\"path\", {\n      fill: \"currentColor\",\n      d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    })\n  });\n}\nAccordionIcon.displayName = \"AccordionIcon\";\n\n// src/accordion-item.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_react3 = require(\"react\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar AccordionItem = (0, import_system3.forwardRef)(function AccordionItem2(props, ref) {\n  const {\n    children,\n    className\n  } = props;\n  const {\n    htmlProps,\n    ...context\n  } = useAccordionItem(props);\n  const styles = useAccordionStyles();\n  const containerStyles = {\n    ...styles.container,\n    overflowAnchor: \"none\"\n  };\n  const ctx = (0, import_react3.useMemo)(() => context, [context]);\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(AccordionItemProvider, {\n    value: ctx,\n    children: /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system3.chakra.div, {\n      ref,\n      ...htmlProps,\n      className: (0, import_shared_utils5.cx)(\"chakra-accordion__item\", className),\n      __css: containerStyles,\n      children: typeof children === \"function\" ? children({\n        isExpanded: !!context.isOpen,\n        isDisabled: !!context.isDisabled\n      }) : children\n    })\n  });\n});\nAccordionItem.displayName = \"AccordionItem\";\n\n// src/accordion-panel.tsx\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_transition = require(\"@chakra-ui/transition\");\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nvar AccordionPanel = (0, import_system4.forwardRef)(function AccordionPanel2(props, ref) {\n  const {\n    className,\n    motionProps,\n    ...rest\n  } = props;\n  const {\n    reduceMotion\n  } = useAccordionContext();\n  const {\n    getPanelProps,\n    isOpen\n  } = useAccordionItemContext();\n  const panelProps = getPanelProps(rest, ref);\n  const _className = (0, import_shared_utils6.cx)(\"chakra-accordion__panel\", className);\n  const styles = useAccordionStyles();\n  if (!reduceMotion) {\n    delete panelProps.hidden;\n  }\n  const child = /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_system4.chakra.div, {\n    ...panelProps,\n    __css: styles.panel,\n    className: _className\n  });\n  if (!reduceMotion) {\n    return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_transition.Collapse, {\n      in: isOpen,\n      ...motionProps,\n      children: child\n    });\n  }\n  return child;\n});\nAccordionPanel.displayName = \"AccordionPanel\";\n\n// src/use-accordion-item-state.ts\nfunction useAccordionItemState() {\n  const {\n    isOpen,\n    isDisabled,\n    onClose,\n    onOpen\n  } = useAccordionItemContext();\n  return {\n    isOpen,\n    onClose,\n    isDisabled,\n    onOpen\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  useAccordionItemState,\n  useAccordionStyles\n});","map":null,"metadata":{},"sourceType":"script"}