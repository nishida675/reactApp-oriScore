{"ast":null,"code":"import { typography_default } from \"./chunk-6XA2KDUD.mjs\";\nimport { inputTheme } from \"./chunk-ICL3HPTT.mjs\";\nimport { runIfFn } from \"./chunk-UV3F75RF.mjs\";\n\n// src/components/number-input.ts\nimport { numberInputAnatomy as parts } from \"@chakra-ui/anatomy\";\nimport { createMultiStyleConfigHelpers, defineStyle } from \"@chakra-ui/styled-system\";\nimport { calc, cssVar } from \"@chakra-ui/theme-tools\";\nvar {\n  defineMultiStyleConfig,\n  definePartsStyle\n} = createMultiStyleConfigHelpers(parts.keys);\nvar $stepperWidth = cssVar(\"number-input-stepper-width\");\nvar $inputPadding = cssVar(\"number-input-input-padding\");\nvar inputPaddingValue = calc($stepperWidth).add(\"0.5rem\").toString();\nvar $bg = cssVar(\"number-input-bg\");\nvar $fg = cssVar(\"number-input-color\");\nvar $border = cssVar(\"number-input-border-color\");\nvar baseStyleRoot = defineStyle({\n  [$stepperWidth.variable]: \"sizes.6\",\n  [$inputPadding.variable]: inputPaddingValue\n});\nvar baseStyleField = defineStyle(props => {\n  var _a, _b;\n  return (_b = (_a = runIfFn(inputTheme.baseStyle, props)) == null ? void 0 : _a.field) != null ? _b : {};\n});\nvar baseStyleStepperGroup = defineStyle({\n  width: $stepperWidth.reference\n});\nvar baseStyleStepper = defineStyle({\n  borderStart: \"1px solid\",\n  borderStartColor: $border.reference,\n  color: $fg.reference,\n  bg: $bg.reference,\n  [$fg.variable]: \"colors.chakra-body-text\",\n  [$border.variable]: \"colors.chakra-border-color\",\n  _dark: {\n    [$fg.variable]: \"colors.whiteAlpha.800\",\n    [$border.variable]: \"colors.whiteAlpha.300\"\n  },\n  _active: {\n    [$bg.variable]: \"colors.gray.200\",\n    _dark: {\n      [$bg.variable]: \"colors.whiteAlpha.300\"\n    }\n  },\n  _disabled: {\n    opacity: 0.4,\n    cursor: \"not-allowed\"\n  }\n});\nvar baseStyle = definePartsStyle(props => {\n  var _a;\n  return {\n    root: baseStyleRoot,\n    field: (_a = runIfFn(baseStyleField, props)) != null ? _a : {},\n    stepperGroup: baseStyleStepperGroup,\n    stepper: baseStyleStepper\n  };\n});\nfunction getSize(size) {\n  var _a, _b, _c;\n  const sizeStyle = (_a = inputTheme.sizes) == null ? void 0 : _a[size];\n  const radius = {\n    lg: \"md\",\n    md: \"md\",\n    sm: \"sm\",\n    xs: \"sm\"\n  };\n  const _fontSize = (_c = (_b = sizeStyle.field) == null ? void 0 : _b.fontSize) != null ? _c : \"md\";\n  const fontSize = typography_default.fontSizes[_fontSize];\n  return definePartsStyle({\n    field: {\n      ...sizeStyle.field,\n      paddingInlineEnd: $inputPadding.reference,\n      verticalAlign: \"top\"\n    },\n    stepper: {\n      fontSize: calc(fontSize).multiply(0.75).toString(),\n      _first: {\n        borderTopEndRadius: radius[size]\n      },\n      _last: {\n        borderBottomEndRadius: radius[size],\n        mt: \"-1px\",\n        borderTopWidth: 1\n      }\n    }\n  });\n}\nvar sizes = {\n  xs: getSize(\"xs\"),\n  sm: getSize(\"sm\"),\n  md: getSize(\"md\"),\n  lg: getSize(\"lg\")\n};\nvar numberInputTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  variants: inputTheme.variants,\n  defaultProps: inputTheme.defaultProps\n});\nexport { numberInputTheme };","map":null,"metadata":{},"sourceType":"module"}