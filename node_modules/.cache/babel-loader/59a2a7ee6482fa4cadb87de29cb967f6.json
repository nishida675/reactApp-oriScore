{"ast":null,"code":"// src/walk-object.ts\nfunction isObject(value) {\n  return typeof value === \"object\" && value != null && !Array.isArray(value);\n}\nfunction walkObject(target, predicate, options = {}) {\n  const {\n    stop,\n    getKey\n  } = options;\n  function inner(value, path = []) {\n    var _a;\n    if (isObject(value) || Array.isArray(value)) {\n      const result = {};\n      for (const [prop, child] of Object.entries(value)) {\n        const key = (_a = getKey == null ? void 0 : getKey(prop)) != null ? _a : prop;\n        const childPath = [...path, key];\n        if (stop == null ? void 0 : stop(value, childPath)) {\n          return predicate(value, path);\n        }\n        result[key] = inner(child, childPath);\n      }\n      return result;\n    }\n    return predicate(value, path);\n  }\n  return inner(target);\n}\nfunction mapObject(obj, fn) {\n  if (!isObject(obj)) return fn(obj);\n  return walkObject(obj, value => fn(value));\n}\nexport { walkObject, mapObject };","map":null,"metadata":{},"sourceType":"module"}