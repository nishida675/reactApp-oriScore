{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  FormControl: () => FormControl,\n  FormErrorIcon: () => FormErrorIcon,\n  FormErrorMessage: () => FormErrorMessage,\n  FormHelperText: () => FormHelperText,\n  FormLabel: () => FormLabel,\n  RequiredIndicator: () => RequiredIndicator,\n  useFormControl: () => useFormControl,\n  useFormControlContext: () => useFormControlContext,\n  useFormControlProps: () => useFormControlProps,\n  useFormControlStyles: () => useFormControlStyles,\n  useFormErrorStyles: () => useFormErrorStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/form-control.tsx\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react = require(\"react\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [FormControlStylesProvider, useFormControlStyles] = (0, import_react_context.createContext)({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `\n});\nvar [FormControlProvider, useFormControlContext] = (0, import_react_context.createContext)({\n  strict: false,\n  name: \"FormControlContext\"\n});\nfunction useFormControlProvider(props) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n  const uuid = (0, import_react.useId)();\n  const id = idProp || `field-${uuid}`;\n  const labelId = `${id}-label`;\n  const feedbackId = `${id}-feedback`;\n  const helpTextId = `${id}-helptext`;\n  const [hasFeedbackText, setHasFeedbackText] = (0, import_react.useState)(false);\n  const [hasHelpText, setHasHelpText] = (0, import_react.useState)(false);\n  const [isFocused, setFocus] = (0, import_react.useState)(false);\n  const getHelpTextProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    id: helpTextId,\n    ...props2,\n    /**\n     * Notify the field context when the help text is rendered on screen,\n     * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n     */\n    ref: (0, import_react_use_merge_refs.mergeRefs)(forwardedRef, node => {\n      if (!node) return;\n      setHasHelpText(true);\n    })\n  }), [helpTextId]);\n  const getLabelProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ref: forwardedRef,\n    \"data-focus\": (0, import_shared_utils.dataAttr)(isFocused),\n    \"data-disabled\": (0, import_shared_utils.dataAttr)(isDisabled),\n    \"data-invalid\": (0, import_shared_utils.dataAttr)(isInvalid),\n    \"data-readonly\": (0, import_shared_utils.dataAttr)(isReadOnly),\n    id: props2.id !== void 0 ? props2.id : labelId,\n    htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id\n  }), [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);\n  const getErrorMessageProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    id: feedbackId,\n    ...props2,\n    /**\n     * Notify the field context when the error message is rendered on screen,\n     * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n     */\n    ref: (0, import_react_use_merge_refs.mergeRefs)(forwardedRef, node => {\n      if (!node) return;\n      setHasFeedbackText(true);\n    }),\n    \"aria-live\": \"polite\"\n  }), [feedbackId]);\n  const getRootProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ...htmlProps,\n    ref: forwardedRef,\n    role: \"group\",\n    \"data-focus\": (0, import_shared_utils.dataAttr)(isFocused),\n    \"data-disabled\": (0, import_shared_utils.dataAttr)(isDisabled),\n    \"data-invalid\": (0, import_shared_utils.dataAttr)(isInvalid),\n    \"data-readonly\": (0, import_shared_utils.dataAttr)(isReadOnly)\n  }), [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly]);\n  const getRequiredIndicatorProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ref: forwardedRef,\n    role: \"presentation\",\n    \"aria-hidden\": true,\n    children: props2.children || \"*\"\n  }), []);\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps\n  };\n}\nvar FormControl = (0, import_system.forwardRef)(function FormControl2(props, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Form\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const {\n    getRootProps,\n    htmlProps: _,\n    ...context\n  } = useFormControlProvider(ownProps);\n  const className = (0, import_shared_utils.cx)(\"chakra-form-control\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormControlProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormControlStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n        ...getRootProps({}, ref),\n        className,\n        __css: styles[\"container\"]\n      })\n    })\n  });\n});\nFormControl.displayName = \"FormControl\";\nvar FormHelperText = (0, import_system.forwardRef)(function FormHelperText2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  const className = (0, import_shared_utils.cx)(\"chakra-form__helper-text\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n    ...(field == null ? void 0 : field.getHelpTextProps(props, ref)),\n    __css: styles.helperText,\n    className\n  });\n});\nFormHelperText.displayName = \"FormHelperText\";\n\n// src/use-form-control.ts\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nfunction useFormControl(props) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props);\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": (0, import_shared_utils2.ariaAttr)(isInvalid),\n    \"aria-required\": (0, import_shared_utils2.ariaAttr)(isRequired),\n    \"aria-readonly\": (0, import_shared_utils2.ariaAttr)(isReadOnly)\n  };\n}\nfunction useFormControlProps(props) {\n  var _a, _b, _c;\n  const field = useFormControlContext();\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props;\n  const labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : [];\n  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field == null ? void 0 : field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || void 0,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: (0, import_shared_utils2.callAllHandlers)(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: (0, import_shared_utils2.callAllHandlers)(field == null ? void 0 : field.onBlur, onBlur)\n  };\n}\n\n// src/form-error.tsx\nvar import_icon = require(\"@chakra-ui/icon\");\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar [FormErrorStylesProvider, useFormErrorStyles] = (0, import_react_context2.createContext)({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `\n});\nvar FormErrorMessage = (0, import_system2.forwardRef)((props, ref) => {\n  const styles = (0, import_system2.useMultiStyleConfig)(\"FormError\", props);\n  const ownProps = (0, import_system2.omitThemingProps)(props);\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(FormErrorStylesProvider, {\n    value: styles,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, {\n      ...(field == null ? void 0 : field.getErrorMessageProps(ownProps, ref)),\n      className: (0, import_shared_utils3.cx)(\"chakra-form__error-message\", props.className),\n      __css: {\n        display: \"flex\",\n        alignItems: \"center\",\n        ...styles.text\n      }\n    })\n  });\n});\nFormErrorMessage.displayName = \"FormErrorMessage\";\nvar FormErrorIcon = (0, import_system2.forwardRef)((props, ref) => {\n  const styles = useFormErrorStyles();\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n  const _className = (0, import_shared_utils3.cx)(\"chakra-form__error-icon\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_icon.Icon, {\n    ref,\n    \"aria-hidden\": true,\n    ...props,\n    __css: styles.icon,\n    className: _className,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"path\", {\n      fill: \"currentColor\",\n      d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n    })\n  });\n});\nFormErrorIcon.displayName = \"FormErrorIcon\";\n\n// src/form-label.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar FormLabel = (0, import_system3.forwardRef)(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = (0, import_system3.useStyleConfig)(\"FormLabel\", passedProps);\n  const props = (0, import_system3.omitThemingProps)(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */(0, import_jsx_runtime3.jsx)(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : {\n    ref,\n    ...rest\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsxs)(import_system3.chakra.label, {\n    ...ownProps,\n    className: (0, import_shared_utils4.cx)(\"chakra-form__label\", props.className),\n    __css: {\n      display: \"block\",\n      textAlign: \"start\",\n      ...styles\n    },\n    children: [children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator]\n  });\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = (0, import_system3.forwardRef)(function RequiredIndicator2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n  const className = (0, import_shared_utils4.cx)(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.span, {\n    ...(field == null ? void 0 : field.getRequiredIndicatorProps(props, ref)),\n    __css: styles.requiredIndicator,\n    className\n  });\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  FormControl,\n  FormErrorIcon,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  RequiredIndicator,\n  useFormControl,\n  useFormControlContext,\n  useFormControlProps,\n  useFormControlStyles,\n  useFormErrorStyles\n});","map":null,"metadata":{},"sourceType":"script"}