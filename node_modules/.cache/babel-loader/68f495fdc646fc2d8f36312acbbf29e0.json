{"ast":null,"code":"'use client';\n\nimport { shouldForwardProp } from \"./chunk-FDQH4LQI.mjs\";\n\n// src/system.ts\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css, isStyleProp } from \"@chakra-ui/styled-system\";\nimport { filterUndefined, objectFilter, runIfFn } from \"@chakra-ui/utils\";\nimport { assignAfter } from \"@chakra-ui/object-utils\";\nimport createStyled from \"@emotion/styled\";\nimport React from \"react\";\nvar _a;\nvar emotion_styled = (_a = createStyled.default) != null ? _a : createStyled;\nvar toCSSObject = ({\n  baseStyle\n}) => props => {\n  const {\n    theme,\n    css: cssProp,\n    __css,\n    sx,\n    ...rest\n  } = props;\n  const styleProps = objectFilter(rest, (_, prop) => isStyleProp(prop));\n  const finalBaseStyle = runIfFn(baseStyle, props);\n  const finalStyles = assignAfter({}, __css, finalBaseStyle, filterUndefined(styleProps), sx);\n  const computedCSS = css(finalStyles)(props.theme);\n  return cssProp ? [computedCSS, cssProp] : computedCSS;\n};\nfunction styled(component, options) {\n  const {\n    baseStyle,\n    ...styledOptions\n  } = options != null ? options : {};\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp;\n  }\n  const styleObject = toCSSObject({\n    baseStyle\n  });\n  const Component = emotion_styled(component, styledOptions)(styleObject);\n  const chakraComponent = React.forwardRef(function ChakraComponent(props, ref) {\n    const {\n      colorMode,\n      forced\n    } = useColorMode();\n    return React.createElement(Component, {\n      ref,\n      \"data-theme\": forced ? colorMode : void 0,\n      ...props\n    });\n  });\n  return chakraComponent;\n}\nexport { toCSSObject, styled };","map":null,"metadata":{},"sourceType":"module"}