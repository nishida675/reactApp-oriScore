{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  AlertDialog: () => AlertDialog,\n  AlertDialogBody: () => ModalBody,\n  AlertDialogCloseButton: () => ModalCloseButton,\n  AlertDialogContent: () => AlertDialogContent,\n  AlertDialogFooter: () => ModalFooter,\n  AlertDialogHeader: () => ModalHeader,\n  AlertDialogOverlay: () => ModalOverlay,\n  Drawer: () => Drawer,\n  DrawerBody: () => ModalBody,\n  DrawerCloseButton: () => ModalCloseButton,\n  DrawerContent: () => DrawerContent,\n  DrawerFooter: () => ModalFooter,\n  DrawerHeader: () => ModalHeader,\n  DrawerOverlay: () => ModalOverlay,\n  Modal: () => Modal,\n  ModalBody: () => ModalBody,\n  ModalCloseButton: () => ModalCloseButton,\n  ModalContent: () => ModalContent,\n  ModalContextProvider: () => ModalContextProvider,\n  ModalFocusScope: () => ModalFocusScope,\n  ModalFooter: () => ModalFooter,\n  ModalHeader: () => ModalHeader,\n  ModalOverlay: () => ModalOverlay,\n  useDrawerContext: () => useDrawerContext,\n  useModal: () => useModal,\n  useModalContext: () => useModalContext,\n  useModalManager: () => useModalManager,\n  useModalStyles: () => useModalStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/alert-dialog.tsx\nvar import_system9 = require(\"@chakra-ui/system\");\n\n// src/modal.tsx\nvar import_portal = require(\"@chakra-ui/portal\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_framer_motion = require(\"framer-motion\");\n\n// src/use-modal.ts\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_aria_hidden = require(\"aria-hidden\");\nvar import_react2 = require(\"react\");\n\n// src/modal-manager.ts\nvar import_react = require(\"react\");\nvar ModalManager = class {\n  constructor() {\n    __publicField(this, \"modals\");\n    this.modals = /* @__PURE__ */new Map();\n  }\n  add(modal) {\n    this.modals.set(modal, this.modals.size + 1);\n    return this.modals.size;\n  }\n  remove(modal) {\n    this.modals.delete(modal);\n  }\n  isTopModal(modal) {\n    if (!modal) return false;\n    return this.modals.get(modal) === this.modals.size;\n  }\n};\nvar modalManager = new ModalManager();\nfunction useModalManager(ref, isOpen) {\n  const [index, setIndex] = (0, import_react.useState)(0);\n  (0, import_react.useEffect)(() => {\n    const node = ref.current;\n    if (!node) return;\n    if (isOpen) {\n      const index2 = modalManager.add(node);\n      setIndex(index2);\n    }\n    return () => {\n      modalManager.remove(node);\n      setIndex(0);\n    };\n  }, [isOpen, ref]);\n  return index;\n}\n\n// src/use-modal.ts\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = (0, import_react2.useRef)(null);\n  const overlayRef = (0, import_react2.useRef)(null);\n  const [dialogId, headerId, bodyId] = useIds(id, `chakra-modal`, `chakra-modal--header`, `chakra-modal--body`);\n  useAriaHidden(dialogRef, isOpen && useInert);\n  const index = useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = (0, import_react2.useRef)(null);\n  const onMouseDown = (0, import_react2.useCallback)(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = (0, import_react2.useCallback)(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  const [headerMounted, setHeaderMounted] = (0, import_react2.useState)(false);\n  const [bodyMounted, setBodyMounted] = (0, import_react2.useState)(false);\n  const getDialogProps = (0, import_react2.useCallback)((props2 = {}, ref = null) => ({\n    role: \"dialog\",\n    ...props2,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, dialogRef),\n    id: dialogId,\n    tabIndex: -1,\n    \"aria-modal\": true,\n    \"aria-labelledby\": headerMounted ? headerId : void 0,\n    \"aria-describedby\": bodyMounted ? bodyId : void 0,\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, event => event.stopPropagation())\n  }), [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  const onOverlayClick = (0, import_react2.useCallback)(event => {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!modalManager.isTopModal(dialogRef.current)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  const getDialogContainerProps = (0, import_react2.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, overlayRef),\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onOverlayClick),\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown),\n    onMouseDown: (0, import_shared_utils.callAllHandlers)(props2.onMouseDown, onMouseDown)\n  }), [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  (0, import_react2.useEffect)(() => {\n    if (!ref.current || !shouldHide) return void 0;\n    return (0, import_aria_hidden.hideOthers)(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp, ...prefixes) {\n  const reactId = (0, import_react2.useId)();\n  const id = idProp || reactId;\n  return (0, import_react2.useMemo)(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\n\n// src/modal.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [ModalStylesProvider, useModalStyles] = (0, import_react_context.createContext)({\n  name: `ModalStylesContext`,\n  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" `\n});\nvar [ModalContextProvider, useModalContext] = (0, import_react_context.createContext)({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage: \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\"\n});\nvar Modal = props => {\n  const modalProps = {\n    scrollBehavior: \"outside\",\n    autoFocus: true,\n    trapFocus: true,\n    returnFocusOnClose: true,\n    blockScrollOnMount: true,\n    allowPinchZoom: false,\n    motionPreset: \"scale\",\n    lockFocusAcrossFrames: true,\n    ...props\n  };\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n    onCloseComplete\n  } = modalProps;\n  const styles = (0, import_system.useMultiStyleConfig)(\"Modal\", modalProps);\n  const modal = useModal(modalProps);\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ModalContextProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(ModalStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, {\n        onExitComplete: onCloseComplete,\n        children: context.isOpen && /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_portal.Portal, {\n          ...portalProps,\n          children\n        })\n      })\n    })\n  });\n};\nModal.displayName = \"Modal\";\n\n// src/modal-content.tsx\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_system3 = require(\"@chakra-ui/system\");\n\n// src/modal-focus.tsx\nvar import_focus_lock = require(\"@chakra-ui/focus-lock\");\nvar import_framer_motion2 = require(\"framer-motion\");\nvar import_react3 = require(\"react\");\nvar import_react_remove_scroll = require(\"react-remove-scroll\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nfunction ModalFocusScope(props) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen\n  } = useModalContext();\n  const [isPresent, safeToRemove] = (0, import_framer_motion2.usePresence)();\n  (0, import_react3.useEffect)(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove);\n    }\n  }, [isPresent, safeToRemove]);\n  const index = useModalManager(dialogRef, isOpen);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_focus_lock.FocusLock, {\n    autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef,\n    lockFocusAcrossFrames,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_react_remove_scroll.RemoveScroll, {\n      removeScrollBar: !preserveScrollBarGap,\n      allowPinchZoom,\n      enabled: index === 1 && blockScrollOnMount,\n      forwardProps: true,\n      children: props.children\n    })\n  });\n}\n\n// src/modal-transition.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_transition = require(\"@chakra-ui/transition\");\nvar import_framer_motion3 = require(\"framer-motion\");\nvar import_react4 = require(\"react\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar transitions = {\n  slideInBottom: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetY: 16,\n      reverse: true\n    }\n  },\n  slideInRight: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetX: 16,\n      reverse: true\n    }\n  },\n  slideInTop: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetY: -16,\n      reverse: true\n    }\n  },\n  slideInLeft: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetX: -16,\n      reverse: true\n    }\n  },\n  scale: {\n    ...import_transition.scaleFadeConfig,\n    custom: {\n      initialScale: 0.95,\n      reverse: true\n    }\n  },\n  none: {}\n};\nvar MotionSection = (0, import_system2.chakra)(import_framer_motion3.motion.section);\nvar getMotionProps = preset => {\n  return transitions[preset || \"none\"];\n};\nvar ModalTransition = (0, import_react4.forwardRef)((props, ref) => {\n  const {\n    preset,\n    motionProps = getMotionProps(preset),\n    ...rest\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(MotionSection, {\n    ref,\n    ...motionProps,\n    ...rest\n  });\n});\nModalTransition.displayName = \"ModalTransition\";\n\n// src/modal-content.tsx\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar ModalContent = (0, import_system3.forwardRef)((props, ref) => {\n  const {\n    className,\n    children,\n    containerProps: rootProps,\n    motionProps,\n    ...rest\n  } = props;\n  const {\n    getDialogProps,\n    getDialogContainerProps\n  } = useModalContext();\n  const dialogProps = getDialogProps(rest, ref);\n  const containerProps = getDialogContainerProps(rootProps);\n  const _className = (0, import_shared_utils2.cx)(\"chakra-modal__content\", className);\n  const styles = useModalStyles();\n  const dialogStyles = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0,\n    ...styles.dialog\n  };\n  const dialogContainerStyles = {\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"$100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0,\n    ...styles.dialogContainer\n  };\n  const {\n    motionPreset\n  } = useModalContext();\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(ModalFocusScope, {\n    children: /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system3.chakra.div, {\n      ...containerProps,\n      className: \"chakra-modal__content-container\",\n      tabIndex: -1,\n      __css: dialogContainerStyles,\n      children: /* @__PURE__ */(0, import_jsx_runtime4.jsx)(ModalTransition, {\n        preset: motionPreset,\n        motionProps,\n        className: _className,\n        ...dialogProps,\n        __css: dialogStyles,\n        children\n      })\n    })\n  });\n});\nModalContent.displayName = \"ModalContent\";\n\n// src/modal-body.tsx\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_react5 = require(\"react\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nvar ModalBody = (0, import_system4.forwardRef)((props, ref) => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const {\n    bodyId,\n    setBodyMounted\n  } = useModalContext();\n  (0, import_react5.useEffect)(() => {\n    setBodyMounted(true);\n    return () => setBodyMounted(false);\n  }, [setBodyMounted]);\n  const _className = (0, import_shared_utils3.cx)(\"chakra-modal__body\", className);\n  const styles = useModalStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_system4.chakra.div, {\n    ref,\n    className: _className,\n    id: bodyId,\n    ...rest,\n    __css: styles.body\n  });\n});\nModalBody.displayName = \"ModalBody\";\n\n// src/modal-close-button.tsx\nvar import_close_button = require(\"@chakra-ui/close-button\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_system5 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime6 = require(\"react/jsx-runtime\");\nvar ModalCloseButton = (0, import_system5.forwardRef)((props, ref) => {\n  const {\n    onClick,\n    className,\n    ...rest\n  } = props;\n  const {\n    onClose\n  } = useModalContext();\n  const _className = (0, import_shared_utils4.cx)(\"chakra-modal__close-btn\", className);\n  const styles = useModalStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime6.jsx)(import_close_button.CloseButton, {\n    ref,\n    __css: styles.closeButton,\n    className: _className,\n    onClick: (0, import_shared_utils4.callAllHandlers)(onClick, event => {\n      event.stopPropagation();\n      onClose();\n    }),\n    ...rest\n  });\n});\nModalCloseButton.displayName = \"ModalCloseButton\";\n\n// src/modal-footer.tsx\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_system6 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime7 = require(\"react/jsx-runtime\");\nvar ModalFooter = (0, import_system6.forwardRef)((props, ref) => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const _className = (0, import_shared_utils5.cx)(\"chakra-modal__footer\", className);\n  const styles = useModalStyles();\n  const footerStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    ...styles.footer\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime7.jsx)(import_system6.chakra.footer, {\n    ref,\n    ...rest,\n    __css: footerStyles,\n    className: _className\n  });\n});\nModalFooter.displayName = \"ModalFooter\";\n\n// src/modal-header.tsx\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_system7 = require(\"@chakra-ui/system\");\nvar import_react6 = require(\"react\");\nvar import_jsx_runtime8 = require(\"react/jsx-runtime\");\nvar ModalHeader = (0, import_system7.forwardRef)((props, ref) => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const {\n    headerId,\n    setHeaderMounted\n  } = useModalContext();\n  (0, import_react6.useEffect)(() => {\n    setHeaderMounted(true);\n    return () => setHeaderMounted(false);\n  }, [setHeaderMounted]);\n  const _className = (0, import_shared_utils6.cx)(\"chakra-modal__header\", className);\n  const styles = useModalStyles();\n  const headerStyles = {\n    flex: 0,\n    ...styles.header\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime8.jsx)(import_system7.chakra.header, {\n    ref,\n    className: _className,\n    id: headerId,\n    ...rest,\n    __css: headerStyles\n  });\n});\nModalHeader.displayName = \"ModalHeader\";\n\n// src/modal-overlay.tsx\nvar import_shared_utils7 = require(\"@chakra-ui/shared-utils\");\nvar import_system8 = require(\"@chakra-ui/system\");\nvar import_transition2 = require(\"@chakra-ui/transition\");\nvar import_framer_motion4 = require(\"framer-motion\");\nvar import_jsx_runtime9 = require(\"react/jsx-runtime\");\nvar MotionDiv = (0, import_system8.chakra)(import_framer_motion4.motion.div);\nvar ModalOverlay = (0, import_system8.forwardRef)((props, ref) => {\n  const {\n    className,\n    transition,\n    motionProps: _motionProps,\n    ...rest\n  } = props;\n  const _className = (0, import_shared_utils7.cx)(\"chakra-modal__overlay\", className);\n  const styles = useModalStyles();\n  const overlayStyle = {\n    pos: \"fixed\",\n    left: \"0\",\n    top: \"0\",\n    w: \"100vw\",\n    h: \"100vh\",\n    ...styles.overlay\n  };\n  const {\n    motionPreset\n  } = useModalContext();\n  const defaultMotionProps = motionPreset === \"none\" ? {} : import_transition2.fadeConfig;\n  const motionProps = _motionProps || defaultMotionProps;\n  return /* @__PURE__ */(0, import_jsx_runtime9.jsx)(MotionDiv, {\n    ...motionProps,\n    __css: overlayStyle,\n    ref,\n    className: _className,\n    ...rest\n  });\n});\nModalOverlay.displayName = \"ModalOverlay\";\n\n// src/alert-dialog.tsx\nvar import_jsx_runtime10 = require(\"react/jsx-runtime\");\nfunction AlertDialog(props) {\n  const {\n    leastDestructiveRef,\n    ...rest\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime10.jsx)(Modal, {\n    ...rest,\n    initialFocusRef: leastDestructiveRef\n  });\n}\nvar AlertDialogContent = (0, import_system9.forwardRef)((props, ref) => /* @__PURE__ */(0, import_jsx_runtime10.jsx)(ModalContent, {\n  ref,\n  role: \"alertdialog\",\n  ...props\n}));\n\n// src/drawer.tsx\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_system10 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime11 = require(\"react/jsx-runtime\");\nvar [DrawerContextProvider, useDrawerContext] = (0, import_react_context2.createContext)();\nvar placementMap = {\n  start: {\n    ltr: \"left\",\n    rtl: \"right\"\n  },\n  end: {\n    ltr: \"right\",\n    rtl: \"left\"\n  }\n};\nfunction getDrawerPlacement(placement, dir) {\n  var _a, _b;\n  if (!placement) return;\n  return (_b = (_a = placementMap[placement]) == null ? void 0 : _a[dir]) != null ? _b : placement;\n}\nfunction Drawer(props) {\n  var _a;\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props;\n  const theme = (0, import_system10.useTheme)();\n  const drawerStyleConfig = (_a = theme.components) == null ? void 0 : _a.Drawer;\n  const placement = getDrawerPlacement(placementProp, theme.direction);\n  return /* @__PURE__ */(0, import_jsx_runtime11.jsx)(DrawerContextProvider, {\n    value: {\n      placement\n    },\n    children: /* @__PURE__ */(0, import_jsx_runtime11.jsx)(Modal, {\n      isOpen,\n      onClose,\n      styleConfig: drawerStyleConfig,\n      ...rest,\n      children\n    })\n  });\n}\n\n// src/drawer-content.tsx\nvar import_shared_utils8 = require(\"@chakra-ui/shared-utils\");\nvar import_system11 = require(\"@chakra-ui/system\");\nvar import_transition3 = require(\"@chakra-ui/transition\");\nvar import_jsx_runtime12 = require(\"react/jsx-runtime\");\nvar MotionDiv2 = (0, import_system11.chakra)(import_transition3.Slide);\nvar DrawerContent = (0, import_system11.forwardRef)((props, ref) => {\n  const {\n    className,\n    children,\n    motionProps,\n    containerProps: rootProps,\n    ...rest\n  } = props;\n  const {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  const dialogProps = getDialogProps(rest, ref);\n  const containerProps = getDialogContainerProps(rootProps);\n  const _className = (0, import_shared_utils8.cx)(\"chakra-modal__content\", className);\n  const styles = useModalStyles();\n  const dialogStyles = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0,\n    ...styles.dialog\n  };\n  const dialogContainerStyles = {\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"$100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0,\n    ...styles.dialogContainer\n  };\n  const {\n    placement\n  } = useDrawerContext();\n  return /* @__PURE__ */(0, import_jsx_runtime12.jsx)(ModalFocusScope, {\n    children: /* @__PURE__ */(0, import_jsx_runtime12.jsx)(import_system11.chakra.div, {\n      ...containerProps,\n      className: \"chakra-modal__content-container\",\n      __css: dialogContainerStyles,\n      children: /* @__PURE__ */(0, import_jsx_runtime12.jsx)(MotionDiv2, {\n        motionProps,\n        direction: placement,\n        in: isOpen,\n        className: _className,\n        ...dialogProps,\n        __css: dialogStyles,\n        children\n      })\n    })\n  });\n});\nDrawerContent.displayName = \"DrawerContent\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogCloseButton,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalContextProvider,\n  ModalFocusScope,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDrawerContext,\n  useModal,\n  useModalContext,\n  useModalManager,\n  useModalStyles\n});","map":null,"metadata":{},"sourceType":"script"}