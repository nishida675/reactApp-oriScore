{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useCallback, useState } from \"react\";\nimport { useMessage } from \"./useMessage\";\nexport const useInnsertExpected = () => {\n  _s();\n  const {\n    showMessage\n  } = useMessage();\n  const [loading2, setLoading2] = useState(false);\n  const innsertExpected = useCallback(async (loginUser, tournamentId, classId, number1, number2, number3, number4, number5, number6) => {\n    setLoading2(true);\n    try {\n      // リクエストのデータをオブジェクトにまとめる\n      const requestData = {\n        loginUser,\n        tournamentId,\n        number1,\n        number2,\n        number3,\n        number4,\n        number5,\n        number6\n      };\n\n      // axios.post の第二引数にデータを渡す\n      const response = await axios.post(`http://localhost:8080/apiTournament/getClass`, requestData);\n      return response.data;\n    } catch (error) {\n      showMessage({\n        title: \"取得に失敗しました\",\n        status: \"error\"\n      });\n      throw error;\n    } finally {\n      setLoading2(false);\n    }\n  }, [showMessage]);\n  return {\n    innsertExpected,\n    loading2\n  };\n};\n_s(useInnsertExpected, \"hwMoOYz/dAcVozHXZcKN/CnteBM=\", false, function () {\n  return [useMessage];\n});","map":{"version":3,"names":["axios","useCallback","useState","useMessage","useInnsertExpected","_s","showMessage","loading2","setLoading2","innsertExpected","loginUser","tournamentId","classId","number1","number2","number3","number4","number5","number6","requestData","response","post","data","error","title","status"],"sources":["/Users/nishidanaoto/ateori-app/src/hooks/useInnsertExpected.ts"],"sourcesContent":["import axios from \"axios\";\nimport { useCallback, useState } from \"react\";\n\nimport { Participant } from \"../types/api/Participant\";\nimport { useMessage } from \"./useMessage\";\n\nexport const useInnsertExpected = () => {\n  const { showMessage } = useMessage();\n  const [loading2, setLoading2] = useState(false);\n\n  const innsertExpected = useCallback(async (loginUser: number, tournamentId: number, classId:number, number1: string, number2: string, number3: string, number4: string, number5: string, number6: string) => {\n    setLoading2(true);\n    try {\n      // リクエストのデータをオブジェクトにまとめる\n      const requestData = {\n        loginUser,\n        tournamentId,\n        number1,\n        number2,\n        number3,\n        number4,\n        number5,\n        number6,\n      };\n\n      // axios.post の第二引数にデータを渡す\n      const response = await axios.post<Array<Participant>>(`http://localhost:8080/apiTournament/getClass`, requestData);\n\n      return response.data;\n    } catch (error) {\n      showMessage({ title: \"取得に失敗しました\", status: \"error\" });\n      throw error;\n    } finally {\n      setLoading2(false);\n    }\n  }, [showMessage]);\n\n  return { innsertExpected, loading2 };\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,UAAU,QAAQ,cAAc;AAEzC,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM;IAAEC;EAAY,CAAC,GAAGH,UAAU,CAAC,CAAC;EACpC,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMO,eAAe,GAAGR,WAAW,CAAC,OAAOS,SAAiB,EAAEC,YAAoB,EAAEC,OAAc,EAAEC,OAAe,EAAEC,OAAe,EAAEC,OAAe,EAAEC,OAAe,EAAEC,OAAe,EAAEC,OAAe,KAAK;IAC3MV,WAAW,CAAC,IAAI,CAAC;IACjB,IAAI;MACF;MACA,MAAMW,WAAW,GAAG;QAClBT,SAAS;QACTC,YAAY;QACZE,OAAO;QACPC,OAAO;QACPC,OAAO;QACPC,OAAO;QACPC,OAAO;QACPC;MACF,CAAC;;MAED;MACA,MAAME,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAsB,8CAA6C,EAAEF,WAAW,CAAC;MAElH,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdjB,WAAW,CAAC;QAAEkB,KAAK,EAAE,WAAW;QAAEC,MAAM,EAAE;MAAQ,CAAC,CAAC;MACpD,MAAMF,KAAK;IACb,CAAC,SAAS;MACRf,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;EAEjB,OAAO;IAAEG,eAAe;IAAEF;EAAS,CAAC;AACtC,CAAC;AAACF,EAAA,CAhCWD,kBAAkB;EAAA,QACLD,UAAU;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}