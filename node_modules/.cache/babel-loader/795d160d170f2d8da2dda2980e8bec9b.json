{"ast":null,"code":"'use client';\n\n// src/focus-lock.tsx\nimport ReactFocusLock from \"react-focus-lock\";\nimport { getAllFocusable } from \"@chakra-ui/dom-utils\";\nimport { useCallback } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar _a;\nvar FocusTrap = (_a = ReactFocusLock.default) != null ? _a : ReactFocusLock;\nvar FocusLock = props => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames\n  } = props;\n  const onActivation = useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      const focusables = getAllFocusable(contentRef.current);\n      if (focusables.length === 0) {\n        requestAnimationFrame(() => {\n          var _a2;\n          (_a2 = contentRef.current) == null ? void 0 : _a2.focus();\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  const onDeactivation = useCallback(() => {\n    var _a2;\n    (_a2 = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a2.focus();\n  }, [finalFocusRef]);\n  const returnFocus = restoreFocus && !finalFocusRef;\n  return /* @__PURE__ */jsx(FocusTrap, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus,\n    autoFocus,\n    disabled: isDisabled,\n    onActivation,\n    onDeactivation,\n    returnFocus,\n    children\n  });\n};\nFocusLock.displayName = \"FocusLock\";\nvar focus_lock_default = FocusLock;\nexport { FocusLock, focus_lock_default };","map":null,"metadata":{},"sourceType":"module"}