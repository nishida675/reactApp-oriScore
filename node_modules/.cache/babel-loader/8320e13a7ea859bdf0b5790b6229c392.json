{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Menu: () => Menu,\n  MenuButton: () => MenuButton,\n  MenuCommand: () => MenuCommand,\n  MenuDescendantsProvider: () => MenuDescendantsProvider,\n  MenuDivider: () => MenuDivider,\n  MenuGroup: () => MenuGroup,\n  MenuIcon: () => MenuIcon,\n  MenuItem: () => MenuItem,\n  MenuItemOption: () => MenuItemOption,\n  MenuList: () => MenuList,\n  MenuOptionGroup: () => MenuOptionGroup,\n  MenuProvider: () => MenuProvider,\n  useMenu: () => useMenu,\n  useMenuButton: () => useMenuButton,\n  useMenuContext: () => useMenuContext,\n  useMenuDescendant: () => useMenuDescendant,\n  useMenuDescendants: () => useMenuDescendants,\n  useMenuDescendantsContext: () => useMenuDescendantsContext,\n  useMenuItem: () => useMenuItem,\n  useMenuList: () => useMenuList,\n  useMenuOption: () => useMenuOption,\n  useMenuOptionGroup: () => useMenuOptionGroup,\n  useMenuPositioner: () => useMenuPositioner,\n  useMenuState: () => useMenuState,\n  useMenuStyles: () => useMenuStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/menu.tsx\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react3 = require(\"react\");\n\n// src/use-menu.ts\nvar import_clickable = require(\"@chakra-ui/clickable\");\nvar import_descendant = require(\"@chakra-ui/descendant\");\nvar import_react_use_focus_effect = require(\"@chakra-ui/react-use-focus-effect\");\nvar import_popper = require(\"@chakra-ui/popper\");\nvar import_react_use_disclosure = require(\"@chakra-ui/react-use-disclosure\");\nvar import_react_use_outside_click = require(\"@chakra-ui/react-use-outside-click\");\nvar import_react_use_animation_state = require(\"@chakra-ui/react-use-animation-state\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_react_children_utils = require(\"@chakra-ui/react-children-utils\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_react_use_update_effect = require(\"@chakra-ui/react-use-update-effect\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_lazy_utils = require(\"@chakra-ui/lazy-utils\");\nvar import_react2 = require(\"react\");\n\n// src/use-shortcut.ts\nvar import_react = require(\"react\");\nfunction isPrintableCharacter(event) {\n  const {\n    key\n  } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\nfunction useShortcut(props = {}) {\n  const {\n    timeout = 300,\n    preventDefault = () => true\n  } = props;\n  const [keys, setKeys] = (0, import_react.useState)([]);\n  const timeoutRef = (0, import_react.useRef)();\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n  const clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n  (0, import_react.useEffect)(() => flush, []);\n  function onKeyDown(fn) {\n    return event => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key);\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        setKeys(keysCopy);\n        fn(keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n  return onKeyDown;\n}\n\n// src/get-next-item-from-search.ts\nfunction getNextItemFromSearch(items, searchString, itemToString, currentItem) {\n  if (searchString == null) {\n    return currentItem;\n  }\n  if (!currentItem) {\n    const foundItem = items.find(item => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));\n    return foundItem;\n  }\n  const matchingItems = items.filter(item => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase()));\n  if (matchingItems.length > 0) {\n    let nextIndex;\n    if (matchingItems.includes(currentItem)) {\n      const currentIndex = matchingItems.indexOf(currentItem);\n      nextIndex = currentIndex + 1;\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0;\n      }\n      return matchingItems[nextIndex];\n    }\n    nextIndex = items.indexOf(matchingItems[0]);\n    return items[nextIndex];\n  }\n  return currentItem;\n}\n\n// src/use-menu.ts\nvar [MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant] = (0, import_descendant.createDescendantContext)();\nvar [MenuProvider, useMenuContext] = (0, import_react_context.createContext)({\n  strict: false,\n  name: \"MenuContext\"\n});\nfunction useIds(idProp, ...prefixes) {\n  const reactId = (0, import_react2.useId)();\n  const id = idProp || reactId;\n  return (0, import_react2.useMemo)(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\nfunction getOwnerDocument(node) {\n  var _a;\n  return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;\n}\nfunction isActiveElement(element) {\n  const doc = getOwnerDocument(element);\n  return doc.activeElement === element;\n}\nfunction useMenu(props = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props;\n  const menuRef = (0, import_react2.useRef)(null);\n  const buttonRef = (0, import_react2.useRef)(null);\n  const descendants = useMenuDescendants();\n  const focusMenu = (0, import_react2.useCallback)(() => {\n    requestAnimationFrame(() => {\n      var _a;\n      (_a = menuRef.current) == null ? void 0 : _a.focus({\n        preventScroll: false\n      });\n    });\n  }, []);\n  const focusFirstItem = (0, import_react2.useCallback)(() => {\n    const id2 = setTimeout(() => {\n      var _a;\n      if (initialFocusRef) {\n        (_a = initialFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        const first = descendants.firstEnabled();\n        if (first) setFocusedIndex(first.index);\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, initialFocusRef]);\n  const focusLastItem = (0, import_react2.useCallback)(() => {\n    const id2 = setTimeout(() => {\n      const last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants]);\n  const onOpenInternal = (0, import_react2.useCallback)(() => {\n    onOpenProp == null ? void 0 : onOpenProp();\n    if (autoSelect) {\n      focusFirstItem();\n    } else {\n      focusMenu();\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);\n  const {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = (0, import_react_use_disclosure.useDisclosure)({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal\n  });\n  (0, import_react_use_outside_click.useOutsideClick)({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: event => {\n      var _a;\n      if (!((_a = buttonRef.current) == null ? void 0 : _a.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  const popper = (0, import_popper.usePopper)({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction\n  });\n  const [focusedIndex, setFocusedIndex] = (0, import_react2.useState)(-1);\n  (0, import_react_use_update_effect.useUpdateEffect)(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  (0, import_react_use_focus_effect.useFocusOnHide)(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  const animationState = (0, import_react_use_animation_state.useAnimationState)({\n    isOpen,\n    ref: menuRef\n  });\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`);\n  const openAndFocusMenu = (0, import_react2.useCallback)(() => {\n    onOpen();\n    focusMenu();\n  }, [onOpen, focusMenu]);\n  const timeoutIds = (0, import_react2.useRef)( /* @__PURE__ */new Set([]));\n  (0, import_react2.useEffect)(() => {\n    const ids = timeoutIds.current;\n    return () => {\n      ids.forEach(id2 => clearTimeout(id2));\n      ids.clear();\n    };\n  }, []);\n  const openAndFocusFirstItem = (0, import_react2.useCallback)(() => {\n    onOpen();\n    focusFirstItem();\n  }, [focusFirstItem, onOpen]);\n  const openAndFocusLastItem = (0, import_react2.useCallback)(() => {\n    onOpen();\n    focusLastItem();\n  }, [onOpen, focusLastItem]);\n  const refocus = (0, import_react2.useCallback)(() => {\n    var _a, _b;\n    const doc = getOwnerDocument(menuRef.current);\n    const hasFocusWithin = (_a = menuRef.current) == null ? void 0 : _a.contains(doc.activeElement);\n    const shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    const node = (_b = descendants.item(focusedIndex)) == null ? void 0 : _b.node;\n    node == null ? void 0 : node.focus({\n      preventScroll: true\n    });\n  }, [isOpen, focusedIndex, descendants]);\n  const rafId = (0, import_react2.useRef)(null);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId\n  };\n}\nfunction useMenuButton(props = {}, externalRef = null) {\n  const menu = useMenuContext();\n  const {\n    onToggle,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem\n  } = menu;\n  const onKeyDown = (0, import_react2.useCallback)(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return {\n    ...props,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": (0, import_shared_utils.dataAttr)(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: (0, import_shared_utils.callAllHandlers)(props.onClick, onToggle),\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props.onKeyDown, onKeyDown)\n  };\n}\nfunction isTargetMenuItem(target) {\n  var _a;\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"menuitem\"));\n}\nfunction useMenuList(props = {}, ref = null) {\n  const menu = useMenuContext();\n  if (!menu) {\n    throw new Error(`useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`);\n  }\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated\n  } = menu;\n  const descendants = useMenuDescendantsContext();\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: event => event.key !== \" \" && isTargetMenuItem(event.target)\n  });\n  const onKeyDown = (0, import_react2.useCallback)(event => {\n    if (!event.currentTarget.contains(event.target)) return;\n    const eventKey = event.key;\n    const keyMap = {\n      Tab: event2 => event2.preventDefault(),\n      Escape: onClose,\n      ArrowDown: () => {\n        const next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: () => {\n        const prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    const fn = keyMap[eventKey];\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    const onTypeahead = createTypeaheadHandler(character => {\n      const nextItem = getNextItemFromSearch(descendants.values(), character, item => {\n        var _a, _b;\n        return (_b = (_a = item == null ? void 0 : item.node) == null ? void 0 : _a.textContent) != null ? _b : \"\";\n      }, descendants.item(focusedIndex));\n      if (nextItem) {\n        const index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  const hasBeenOpened = (0, import_react2.useRef)(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  const shouldRenderChildren = (0, import_lazy_utils.lazyDisclosure)({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  return {\n    ...props,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\"\n    },\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props.onKeyDown, onKeyDown)\n  };\n}\nfunction useMenuPositioner(props = {}) {\n  const {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style\n    }\n  });\n}\nfunction useMenuItem(props = {}, externalRef = null) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props;\n  const menu = useMenuContext();\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId\n  } = menu;\n  const ref = (0, import_react2.useRef)(null);\n  const id = `${menuId}-menuitem-${(0, import_react2.useId)()}`;\n  const {\n    index,\n    register\n  } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  const onMouseEnter = (0, import_react2.useCallback)(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  const onMouseMove = (0, import_react2.useCallback)(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  const onMouseLeave = (0, import_react2.useCallback)(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  const onClick = (0, import_react2.useCallback)(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  const onFocus = (0, import_react2.useCallback)(event => {\n    onFocusProp == null ? void 0 : onFocusProp(event);\n    setFocusedIndex(index);\n  }, [setFocusedIndex, onFocusProp, index]);\n  const isFocused = index === focusedIndex;\n  const trulyDisabled = isDisabled && !isFocusable;\n  (0, import_react_use_update_effect.useUpdateEffect)(() => {\n    if (!isOpen) return;\n    if (isFocused && !trulyDisabled && ref.current) {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n      rafId.current = requestAnimationFrame(() => {\n        var _a;\n        (_a = ref.current) == null ? void 0 : _a.focus({\n          preventScroll: true\n        });\n        rafId.current = null;\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({\n        preventScroll: true\n      });\n    }\n    return () => {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  const clickableProps = (0, import_clickable.useClickable)({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(register, ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    type: typeProp != null ? typeProp : clickableProps.type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  };\n}\nfunction useMenuOption(props = {}, ref = null) {\n  const {\n    type = \"radio\",\n    isChecked,\n    ...rest\n  } = props;\n  const ownProps = useMenuItem(rest, ref);\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked\n  };\n}\nfunction useMenuOptionGroup(props = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props;\n  const isRadio = type === \"radio\";\n  const fallback = isRadio ? \"\" : [];\n  const [value, setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const onChange = (0, import_react2.useCallback)(selectedValue => {\n    if (type === \"radio\" && typeof value === \"string\") {\n      setValue(selectedValue);\n    }\n    if (type === \"checkbox\" && Array.isArray(value)) {\n      const nextValue = value.includes(selectedValue) ? value.filter(item => item !== selectedValue) : value.concat(selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  const validChildren = (0, import_react_children_utils.getValidChildren)(children);\n  const clones = validChildren.map(child => {\n    if (child.type.id !== \"MenuItemOption\") return child;\n    const onClick = event => {\n      var _a, _b;\n      onChange(child.props.value);\n      (_b = (_a = child.props).onClick) == null ? void 0 : _b.call(_a, event);\n    };\n    const isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return (0, import_react2.cloneElement)(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return {\n    ...htmlProps,\n    children: clones\n  };\n}\nfunction useMenuState() {\n  const {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}\nfunction isHTMLElement(el) {\n  var _a;\n  if (!isElement(el)) return false;\n  const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;\n  return el instanceof win.HTMLElement;\n}\nfunction isElement(el) {\n  return el != null && typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE;\n}\n\n// src/menu.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [MenuStylesProvider, useMenuStyles] = (0, import_react_context2.createContext)({\n  name: `MenuStylesContext`,\n  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\" `\n});\nvar Menu = props => {\n  const {\n    children\n  } = props;\n  const styles = (0, import_system.useMultiStyleConfig)(\"Menu\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const {\n    direction\n  } = (0, import_system.useTheme)();\n  const {\n    descendants,\n    ...ctx\n  } = useMenu({\n    ...ownProps,\n    direction\n  });\n  const context = (0, import_react3.useMemo)(() => ctx, [ctx]);\n  const {\n    isOpen,\n    onClose,\n    forceUpdate\n  } = context;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuProvider, {\n      value: context,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(MenuStylesProvider, {\n        value: styles,\n        children: (0, import_shared_utils2.runIfFn)(children, {\n          isOpen,\n          onClose,\n          forceUpdate\n        })\n      })\n    })\n  });\n};\nMenu.displayName = \"Menu\";\n\n// src/menu-button.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar StyledMenuButton = (0, import_system2.forwardRef)((props, ref) => {\n  const styles = useMenuStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.button, {\n    ref,\n    ...props,\n    __css: {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      outline: 0,\n      ...styles.button\n    }\n  });\n});\nvar MenuButton = (0, import_system2.forwardRef)((props, ref) => {\n  const {\n    children,\n    as: As,\n    ...rest\n  } = props;\n  const buttonProps = useMenuButton(rest, ref);\n  const Element = As || StyledMenuButton;\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(Element, {\n    ...buttonProps,\n    className: (0, import_shared_utils3.cx)(\"chakra-menu__menu-button\", props.className),\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.span, {\n      __css: {\n        pointerEvents: \"none\",\n        flex: \"1 1 auto\",\n        minW: 0\n      },\n      children: props.children\n    })\n  });\n});\nMenuButton.displayName = \"MenuButton\";\n\n// src/menu-command.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar MenuCommand = (0, import_system3.forwardRef)((props, ref) => {\n  const styles = useMenuStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.span, {\n    ref,\n    ...props,\n    __css: styles.command,\n    className: \"chakra-menu__command\"\n  });\n});\nMenuCommand.displayName = \"MenuCommand\";\n\n// src/menu-divider.tsx\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar MenuDivider = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const styles = useMenuStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system4.chakra.hr, {\n    \"aria-orientation\": \"horizontal\",\n    className: (0, import_shared_utils4.cx)(\"chakra-menu__divider\", className),\n    ...rest,\n    __css: styles.divider\n  });\n};\nMenuDivider.displayName = \"MenuDivider\";\n\n// src/menu-group.tsx\nvar import_system5 = require(\"@chakra-ui/system\");\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nvar MenuGroup = (0, import_system5.forwardRef)((props, ref) => {\n  const {\n    title,\n    children,\n    className,\n    ...rest\n  } = props;\n  const _className = (0, import_shared_utils5.cx)(\"chakra-menu__group__title\", className);\n  const styles = useMenuStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime5.jsxs)(\"div\", {\n    ref,\n    className: \"chakra-menu__group\",\n    role: \"group\",\n    children: [title && /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_system5.chakra.p, {\n      className: _className,\n      ...rest,\n      __css: styles.groupTitle,\n      children: title\n    }), children]\n  });\n});\nMenuGroup.displayName = \"MenuGroup\";\n\n// src/menu-icon.tsx\nvar import_system6 = require(\"@chakra-ui/system\");\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_react4 = require(\"react\");\nvar import_jsx_runtime6 = require(\"react/jsx-runtime\");\nvar MenuIcon = props => {\n  const {\n    className,\n    children,\n    ...rest\n  } = props;\n  const styles = useMenuStyles();\n  const child = import_react4.Children.only(children);\n  const clone = (0, import_react4.isValidElement)(child) ? (0, import_react4.cloneElement)(child, {\n    focusable: \"false\",\n    \"aria-hidden\": true,\n    className: (0, import_shared_utils6.cx)(\"chakra-menu__icon\", child.props.className)\n  }) : null;\n  const _className = (0, import_shared_utils6.cx)(\"chakra-menu__icon-wrapper\", className);\n  return /* @__PURE__ */(0, import_jsx_runtime6.jsx)(import_system6.chakra.span, {\n    className: _className,\n    ...rest,\n    __css: styles.icon,\n    children: clone\n  });\n};\nMenuIcon.displayName = \"MenuIcon\";\n\n// src/menu-item.tsx\nvar import_system8 = require(\"@chakra-ui/system\");\nvar import_shared_utils7 = require(\"@chakra-ui/shared-utils\");\n\n// src/styled-menu-item.tsx\nvar import_system7 = require(\"@chakra-ui/system\");\nvar import_react5 = require(\"react\");\nvar import_jsx_runtime7 = require(\"react/jsx-runtime\");\nvar StyledMenuItem = (0, import_system7.forwardRef)((props, ref) => {\n  const {\n    type,\n    ...rest\n  } = props;\n  const styles = useMenuStyles();\n  const btnType = rest.as || type ? type != null ? type : void 0 : \"button\";\n  const buttonStyles = (0, import_react5.useMemo)(() => ({\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    ...styles.item\n  }), [styles.item]);\n  return /* @__PURE__ */(0, import_jsx_runtime7.jsx)(import_system7.chakra.button, {\n    ref,\n    type: btnType,\n    ...rest,\n    __css: buttonStyles\n  });\n});\n\n// src/menu-item.tsx\nvar import_jsx_runtime8 = require(\"react/jsx-runtime\");\nvar MenuItem = (0, import_system8.forwardRef)((props, ref) => {\n  const {\n    icon,\n    iconSpacing = \"0.75rem\",\n    command,\n    commandSpacing = \"0.75rem\",\n    children,\n    ...rest\n  } = props;\n  const menuitemProps = useMenuItem(rest, ref);\n  const shouldWrap = icon || command;\n  const _children = shouldWrap ? /* @__PURE__ */(0, import_jsx_runtime8.jsx)(\"span\", {\n    style: {\n      pointerEvents: \"none\",\n      flex: 1\n    },\n    children\n  }) : children;\n  return /* @__PURE__ */(0, import_jsx_runtime8.jsxs)(StyledMenuItem, {\n    ...menuitemProps,\n    className: (0, import_shared_utils7.cx)(\"chakra-menu__menuitem\", menuitemProps.className),\n    children: [icon && /* @__PURE__ */(0, import_jsx_runtime8.jsx)(MenuIcon, {\n      fontSize: \"0.8em\",\n      marginEnd: iconSpacing,\n      children: icon\n    }), _children, command && /* @__PURE__ */(0, import_jsx_runtime8.jsx)(MenuCommand, {\n      marginStart: commandSpacing,\n      children: command\n    })]\n  });\n});\nMenuItem.displayName = \"MenuItem\";\n\n// src/menu-item-option.tsx\nvar import_system9 = require(\"@chakra-ui/system\");\nvar import_shared_utils8 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime9 = require(\"react/jsx-runtime\");\nvar CheckIcon = props => /* @__PURE__ */(0, import_jsx_runtime9.jsx)(\"svg\", {\n  viewBox: \"0 0 14 14\",\n  width: \"1em\",\n  height: \"1em\",\n  ...props,\n  children: /* @__PURE__ */(0, import_jsx_runtime9.jsx)(\"polygon\", {\n    fill: \"currentColor\",\n    points: \"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n  })\n});\nvar MenuItemOption = (0, import_system9.forwardRef)((props, ref) => {\n  const {\n    icon,\n    iconSpacing = \"0.75rem\",\n    ...rest\n  } = props;\n  const optionProps = useMenuOption(rest, ref);\n  return /* @__PURE__ */(0, import_jsx_runtime9.jsxs)(StyledMenuItem, {\n    ...optionProps,\n    className: (0, import_shared_utils8.cx)(\"chakra-menu__menuitem-option\", rest.className),\n    children: [icon !== null && /* @__PURE__ */(0, import_jsx_runtime9.jsx)(MenuIcon, {\n      fontSize: \"0.8em\",\n      marginEnd: iconSpacing,\n      opacity: props.isChecked ? 1 : 0,\n      children: icon || /* @__PURE__ */(0, import_jsx_runtime9.jsx)(CheckIcon, {})\n    }), /* @__PURE__ */(0, import_jsx_runtime9.jsx)(\"span\", {\n      style: {\n        flex: 1\n      },\n      children: optionProps.children\n    })]\n  });\n});\nMenuItemOption.id = \"MenuItemOption\";\nMenuItemOption.displayName = \"MenuItemOption\";\n\n// src/menu-list.tsx\nvar import_shared_utils9 = require(\"@chakra-ui/shared-utils\");\nvar import_system10 = require(\"@chakra-ui/system\");\nvar import_framer_motion = require(\"framer-motion\");\nvar import_jsx_runtime10 = require(\"react/jsx-runtime\");\nvar motionVariants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\"\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\"\n    }\n  }\n};\nvar MenuTransition = (0, import_system10.chakra)(import_framer_motion.motion.div);\nvar MenuList = (0, import_system10.forwardRef)(function MenuList2(props, ref) {\n  var _a, _b;\n  const {\n    rootProps,\n    motionProps,\n    ...rest\n  } = props;\n  const {\n    isOpen,\n    onTransitionEnd,\n    unstable__animationState: animated\n  } = useMenuContext();\n  const listProps = useMenuList(rest, ref);\n  const positionerProps = useMenuPositioner(rootProps);\n  const styles = useMenuStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime10.jsx)(import_system10.chakra.div, {\n    ...positionerProps,\n    __css: {\n      zIndex: (_b = props.zIndex) != null ? _b : (_a = styles.list) == null ? void 0 : _a.zIndex\n    },\n    children: /* @__PURE__ */(0, import_jsx_runtime10.jsx)(MenuTransition, {\n      variants: motionVariants,\n      initial: false,\n      animate: isOpen ? \"enter\" : \"exit\",\n      __css: {\n        outline: 0,\n        ...styles.list\n      },\n      ...motionProps,\n      className: (0, import_shared_utils9.cx)(\"chakra-menu__menu-list\", listProps.className),\n      ...listProps,\n      onUpdate: onTransitionEnd,\n      onAnimationComplete: (0, import_shared_utils9.callAll)(animated.onComplete, listProps.onAnimationComplete)\n    })\n  });\n});\nMenuList.displayName = \"MenuList\";\n\n// src/menu-option-group.tsx\nvar import_shared_utils10 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime11 = require(\"react/jsx-runtime\");\nvar MenuOptionGroup = props => {\n  const {\n    className,\n    title,\n    ...rest\n  } = props;\n  const ownProps = useMenuOptionGroup(rest);\n  return /* @__PURE__ */(0, import_jsx_runtime11.jsx)(MenuGroup, {\n    title,\n    className: (0, import_shared_utils10.cx)(\"chakra-menu__option-group\", className),\n    ...ownProps\n  });\n};\nMenuOptionGroup.displayName = \"MenuOptionGroup\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Menu,\n  MenuButton,\n  MenuCommand,\n  MenuDescendantsProvider,\n  MenuDivider,\n  MenuGroup,\n  MenuIcon,\n  MenuItem,\n  MenuItemOption,\n  MenuList,\n  MenuOptionGroup,\n  MenuProvider,\n  useMenu,\n  useMenuButton,\n  useMenuContext,\n  useMenuDescendant,\n  useMenuDescendants,\n  useMenuDescendantsContext,\n  useMenuItem,\n  useMenuList,\n  useMenuOption,\n  useMenuOptionGroup,\n  useMenuPositioner,\n  useMenuState,\n  useMenuStyles\n});","map":null,"metadata":{},"sourceType":"script"}