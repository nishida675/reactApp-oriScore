{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Tab: () => Tab,\n  TabIndicator: () => TabIndicator,\n  TabList: () => TabList,\n  TabPanel: () => TabPanel,\n  TabPanels: () => TabPanels,\n  Tabs: () => Tabs,\n  TabsDescendantsProvider: () => TabsDescendantsProvider,\n  TabsProvider: () => TabsProvider,\n  useTab: () => useTab,\n  useTabIndicator: () => useTabIndicator,\n  useTabList: () => useTabList,\n  useTabPanel: () => useTabPanel,\n  useTabPanels: () => useTabPanels,\n  useTabs: () => useTabs,\n  useTabsContext: () => useTabsContext,\n  useTabsDescendant: () => useTabsDescendant,\n  useTabsDescendants: () => useTabsDescendants,\n  useTabsDescendantsContext: () => useTabsDescendantsContext,\n  useTabsStyles: () => useTabsStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/tab.tsx\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_system2 = require(\"@chakra-ui/system\");\n\n// src/tabs.tsx\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react2 = require(\"react\");\n\n// src/use-tabs.ts\nvar import_clickable = require(\"@chakra-ui/clickable\");\nvar import_descendant = require(\"@chakra-ui/descendant\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_react_children_utils = require(\"@chakra-ui/react-children-utils\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_lazy_utils = require(\"@chakra-ui/lazy-utils\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react = require(\"react\");\nvar [TabsDescendantsProvider, useTabsDescendantsContext, useTabsDescendants, useTabsDescendant] = (0, import_descendant.createDescendantContext)();\nfunction useTabs(props) {\n  var _a;\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    ...htmlProps\n  } = props;\n  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(defaultIndex != null ? defaultIndex : 0);\n  const [selectedIndex, setSelectedIndex] = (0, import_react_use_controllable_state.useControllableState)({\n    defaultValue: defaultIndex != null ? defaultIndex : 0,\n    value: index,\n    onChange\n  });\n  (0, import_react.useEffect)(() => {\n    if (index != null) {\n      setFocusedIndex(index);\n    }\n  }, [index]);\n  const descendants = useTabsDescendants();\n  const uuid = (0, import_react.useId)();\n  const uid = (_a = props.id) != null ? _a : uuid;\n  const id = `tabs-${uid}`;\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    descendants,\n    direction,\n    htmlProps\n  };\n}\nvar [TabsProvider, useTabsContext] = (0, import_react_context.createContext)({\n  name: \"TabsContext\",\n  errorMessage: \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\"\n});\nfunction useTabList(props) {\n  const {\n    focusedIndex,\n    orientation,\n    direction\n  } = useTabsContext();\n  const descendants = useTabsDescendantsContext();\n  const onKeyDown = (0, import_react.useCallback)(event => {\n    const nextTab = () => {\n      var _a;\n      const next = descendants.nextEnabled(focusedIndex);\n      if (next) (_a = next.node) == null ? void 0 : _a.focus();\n    };\n    const prevTab = () => {\n      var _a;\n      const prev = descendants.prevEnabled(focusedIndex);\n      if (prev) (_a = prev.node) == null ? void 0 : _a.focus();\n    };\n    const firstTab = () => {\n      var _a;\n      const first = descendants.firstEnabled();\n      if (first) (_a = first.node) == null ? void 0 : _a.focus();\n    };\n    const lastTab = () => {\n      var _a;\n      const last = descendants.lastEnabled();\n      if (last) (_a = last.node) == null ? void 0 : _a.focus();\n    };\n    const isHorizontal = orientation === \"horizontal\";\n    const isVertical = orientation === \"vertical\";\n    const eventKey = event.key;\n    const ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\";\n    const ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\";\n    const keyMap = {\n      [ArrowStart]: () => isHorizontal && prevTab(),\n      [ArrowEnd]: () => isHorizontal && nextTab(),\n      ArrowDown: () => isVertical && nextTab(),\n      ArrowUp: () => isVertical && prevTab(),\n      Home: firstTab,\n      End: lastTab\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, focusedIndex, orientation, direction]);\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props.onKeyDown, onKeyDown)\n  };\n}\nfunction useTab(props) {\n  const {\n    isDisabled = false,\n    isFocusable = false,\n    ...htmlProps\n  } = props;\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    selectedIndex\n  } = useTabsContext();\n  const {\n    index,\n    register\n  } = useTabsDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  const isSelected = index === selectedIndex;\n  const onClick = () => {\n    setSelectedIndex(index);\n  };\n  const onFocus = () => {\n    setFocusedIndex(index);\n    const isDisabledButFocusable = isDisabled && isFocusable;\n    const shouldSelect = !isManual && !isDisabledButFocusable;\n    if (shouldSelect) {\n      setSelectedIndex(index);\n    }\n  };\n  const clickableProps = (0, import_clickable.useClickable)({\n    ...htmlProps,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(register, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: (0, import_shared_utils.callAllHandlers)(props.onClick, onClick)\n  });\n  const type = \"button\";\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? void 0 : (0, import_shared_utils.callAllHandlers)(props.onFocus, onFocus)\n  };\n}\nvar [TabPanelProvider, useTabPanelContext] = (0, import_react_context.createContext)({});\nfunction useTabPanels(props) {\n  const context = useTabsContext();\n  const {\n    id,\n    selectedIndex\n  } = context;\n  const validChildren = (0, import_react_children_utils.getValidChildren)(props.children);\n  const children = validChildren.map((child, index) => (0, import_react.createElement)(TabPanelProvider, {\n    key: index,\n    value: {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      tabId: makeTabId(id, index),\n      selectedIndex\n    }\n  }, child));\n  return {\n    ...props,\n    children\n  };\n}\nfunction useTabPanel(props) {\n  const {\n    children,\n    ...htmlProps\n  } = props;\n  const {\n    isLazy,\n    lazyBehavior\n  } = useTabsContext();\n  const {\n    isSelected,\n    id,\n    tabId\n  } = useTabPanelContext();\n  const hasBeenSelected = (0, import_react.useRef)(false);\n  if (isSelected) {\n    hasBeenSelected.current = true;\n  }\n  const shouldRenderChildren = (0, import_lazy_utils.lazyDisclosure)({\n    wasSelected: hasBeenSelected.current,\n    isSelected,\n    enabled: isLazy,\n    mode: lazyBehavior\n  });\n  return {\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0,\n    ...htmlProps,\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    \"aria-labelledby\": tabId,\n    hidden: !isSelected,\n    id\n  };\n}\nfunction useTabIndicator() {\n  const context = useTabsContext();\n  const descendants = useTabsDescendantsContext();\n  const {\n    selectedIndex,\n    orientation\n  } = context;\n  const isHorizontal = orientation === \"horizontal\";\n  const isVertical = orientation === \"vertical\";\n  const [rect, setRect] = (0, import_react.useState)(() => {\n    if (isHorizontal) return {\n      left: 0,\n      width: 0\n    };\n    if (isVertical) return {\n      top: 0,\n      height: 0\n    };\n    return void 0;\n  });\n  const [hasMeasured, setHasMeasured] = (0, import_react.useState)(false);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    if (selectedIndex == null) return;\n    const tab = descendants.item(selectedIndex);\n    if (tab == null) return;\n    if (isHorizontal) {\n      setRect({\n        left: tab.node.offsetLeft,\n        width: tab.node.offsetWidth\n      });\n    }\n    if (isVertical) {\n      setRect({\n        top: tab.node.offsetTop,\n        height: tab.node.offsetHeight\n      });\n    }\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true);\n    });\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id);\n      }\n    };\n  }, [selectedIndex, isHorizontal, isVertical, descendants]);\n  return {\n    position: \"absolute\",\n    transitionProperty: \"left, right, top, bottom, height, width\",\n    transitionDuration: hasMeasured ? \"200ms\" : \"0ms\",\n    transitionTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n    ...rect\n  };\n}\nfunction makeTabId(id, index) {\n  return `${id}--tab-${index}`;\n}\nfunction makeTabPanelId(id, index) {\n  return `${id}--tabpanel-${index}`;\n}\n\n// src/tabs.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [TabsStylesProvider, useTabsStyles] = (0, import_react_context2.createContext)({\n  name: `TabsStylesContext`,\n  errorMessage: `useTabsStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tabs />\" `\n});\nvar Tabs = (0, import_system.forwardRef)(function Tabs2(props, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Tabs\", props);\n  const {\n    children,\n    className,\n    ...rest\n  } = (0, import_system.omitThemingProps)(props);\n  const {\n    htmlProps,\n    descendants,\n    ...ctx\n  } = useTabs(rest);\n  const context = (0, import_react2.useMemo)(() => ctx, [ctx]);\n  const {\n    isFitted: _,\n    ...rootProps\n  } = htmlProps;\n  const tabsStyles = {\n    position: \"relative\",\n    ...styles.root\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(TabsDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(TabsProvider, {\n      value: context,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(TabsStylesProvider, {\n        value: styles,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n          className: (0, import_shared_utils2.cx)(\"chakra-tabs\", className),\n          ref,\n          ...rootProps,\n          __css: tabsStyles,\n          children\n        })\n      })\n    })\n  });\n});\nTabs.displayName = \"Tabs\";\n\n// src/tab.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar Tab = (0, import_system2.forwardRef)(function Tab2(props, ref) {\n  const styles = useTabsStyles();\n  const tabProps = useTab({\n    ...props,\n    ref\n  });\n  const tabStyles = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.button, {\n    ...tabProps,\n    className: (0, import_shared_utils3.cx)(\"chakra-tabs__tab\", props.className),\n    __css: tabStyles\n  });\n});\nTab.displayName = \"Tab\";\n\n// src/tab-indicator.tsx\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar TabIndicator = (0, import_system3.forwardRef)(function TabIndicator2(props, ref) {\n  const indicatorStyle = useTabIndicator();\n  const style = {\n    ...props.style,\n    ...indicatorStyle\n  };\n  const styles = useTabsStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.div, {\n    ref,\n    ...props,\n    className: (0, import_shared_utils4.cx)(\"chakra-tabs__tab-indicator\", props.className),\n    style,\n    __css: styles.indicator\n  });\n});\nTabIndicator.displayName = \"TabIndicator\";\n\n// src/tab-list.tsx\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar TabList = (0, import_system4.forwardRef)(function TabList2(props, ref) {\n  const tablistProps = useTabList({\n    ...props,\n    ref\n  });\n  const styles = useTabsStyles();\n  const tablistStyles = {\n    display: \"flex\",\n    ...styles.tablist\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system4.chakra.div, {\n    ...tablistProps,\n    className: (0, import_shared_utils5.cx)(\"chakra-tabs__tablist\", props.className),\n    __css: tablistStyles\n  });\n});\nTabList.displayName = \"TabList\";\n\n// src/tab-panel.tsx\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_system5 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nvar TabPanel = (0, import_system5.forwardRef)(function TabPanel2(props, ref) {\n  const panelProps = useTabPanel({\n    ...props,\n    ref\n  });\n  const styles = useTabsStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_system5.chakra.div, {\n    outline: \"0\",\n    ...panelProps,\n    className: (0, import_shared_utils6.cx)(\"chakra-tabs__tab-panel\", props.className),\n    __css: styles.tabpanel\n  });\n});\nTabPanel.displayName = \"TabPanel\";\n\n// src/tab-panels.tsx\nvar import_shared_utils7 = require(\"@chakra-ui/shared-utils\");\nvar import_system6 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime6 = require(\"react/jsx-runtime\");\nvar TabPanels = (0, import_system6.forwardRef)(function TabPanels2(props, ref) {\n  const panelsProps = useTabPanels(props);\n  const styles = useTabsStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime6.jsx)(import_system6.chakra.div, {\n    ...panelsProps,\n    width: \"100%\",\n    ref,\n    className: (0, import_shared_utils7.cx)(\"chakra-tabs__tab-panels\", props.className),\n    __css: styles.tabpanels\n  });\n});\nTabPanels.displayName = \"TabPanels\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Tab,\n  TabIndicator,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  TabsDescendantsProvider,\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  useTabsContext,\n  useTabsDescendant,\n  useTabsDescendants,\n  useTabsDescendantsContext,\n  useTabsStyles\n});","map":null,"metadata":{},"sourceType":"script"}