{"ast":null,"code":"import { __DEV__, isFunction, isNumber } from \"./chunk-Y5FGD7DM.mjs\";\n\n// src/function.ts\nfunction runIfFn(valueOrFn, ...args) {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;\n}\nfunction callAllHandlers(...fns) {\n  return function func(event) {\n    fns.some(fn => {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\nfunction callAll(...fns) {\n  return function mergedFn(arg) {\n    fns.forEach(fn => {\n      fn == null ? void 0 : fn(arg);\n    });\n  };\n}\nvar compose = (fn1, ...fns) => fns.reduce((f1, f2) => (...args) => f1(f2(...args)), fn1);\nfunction once(fn) {\n  let result;\n  return function func(...args) {\n    if (fn) {\n      result = fn.apply(this, args);\n      fn = null;\n    }\n    return result;\n  };\n}\nvar noop = () => {};\nvar warn = /* @__PURE__ */once(options => () => {\n  const {\n    condition,\n    message\n  } = options;\n  if (condition && __DEV__) {\n    console.warn(message);\n  }\n});\nvar error = /* @__PURE__ */once(options => () => {\n  const {\n    condition,\n    message\n  } = options;\n  if (condition && __DEV__) {\n    console.error(message);\n  }\n});\nvar pipe = (...fns) => v => fns.reduce((a, b) => b(a), v);\nvar distance1D = (a, b) => Math.abs(a - b);\nvar isPoint = point => \"x\" in point && \"y\" in point;\nfunction distance(a, b) {\n  if (isNumber(a) && isNumber(b)) {\n    return distance1D(a, b);\n  }\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n  }\n  return 0;\n}\nexport { runIfFn, callAllHandlers, callAll, compose, once, noop, warn, error, pipe, distance };","map":null,"metadata":{},"sourceType":"module"}