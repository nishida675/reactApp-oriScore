{"ast":null,"code":"import{useCallback,useState}from\"react\";import axios from\"axios\";import{useNavigate}from\"react-router-dom\";import{useMessage}from\"./useMessage\";export const useCreate=()=>{const history=useNavigate();const{showMessage}=useMessage();const apiUrl=\"http://localhost:8080/api/create\";const[loading,setLoading]=useState(false);const create=useCallback((userName,userPass)=>{if(!userName){showMessage({title:\"ユーザー名を入力してください\",status:\"error\"});setLoading(false);return;}setLoading(true);axios.post(apiUrl,{name:userName,pass:userPass}).then(res=>{if(res.data){showMessage({title:\"新規登録できました\",status:\"success\"});history(\"/\");}}).catch(error=>{if(error.response&&error.response.status===409){// 409エラーの場合の処理\nshowMessage({title:\"ユーザー名が既に使用されています\",status:\"error\"});}else{// その他のエラーの場合の処理\nshowMessage({title:\"登録に失敗しました\",status:\"error\"});}setLoading(false);});},[history,showMessage]);return{create,loading};};","map":{"version":3,"names":["useCallback","useState","axios","useNavigate","useMessage","useCreate","history","showMessage","apiUrl","loading","setLoading","create","userName","userPass","title","status","post","name","pass","then","res","data","catch","error","response"],"sources":["/Users/nishidanaoto/ateori-app/src/hooks/useCreate.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport axios from \"axios\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { User } from \"../types/api/user\";\nimport { useMessage } from \"./useMessage\";\n\nexport const useCreate = () => {\n  const history = useNavigate();\n  const { showMessage } = useMessage();\n  const apiUrl = \"http://localhost:8080/api/create\";\n  const [loading, setLoading] = useState(false);\n  const create = useCallback(\n    (userName: string, userPass: string) => {\n      if (!userName) {\n        showMessage({ title: \"ユーザー名を入力してください\", status: \"error\" });\n        setLoading(false);\n        return;\n      }\n      setLoading(true);\n      axios\n        .post<User>(apiUrl, {\n          name: userName,\n          pass: userPass\n        })\n        .then((res) => {\n          if (res.data) {\n            showMessage({ title: \"新規登録できました\", status: \"success\" });\n            history(\"/\");\n          } \n        })\n        .catch((error) => {\n          if (error.response && error.response.status === 409) {\n            // 409エラーの場合の処理\n            showMessage({ title: \"ユーザー名が既に使用されています\", status: \"error\" });\n          } else {\n            // その他のエラーの場合の処理\n            showMessage({ title: \"登録に失敗しました\", status: \"error\" });\n          }\n          setLoading(false);\n        });\n    },\n    [history, showMessage]\n  );\n  return { create, loading };\n};"],"mappings":"AAAA,OAASA,WAAW,CAAEC,QAAQ,KAAQ,OAAO,CAC7C,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,OAASC,WAAW,KAAQ,kBAAkB,CAE9C,OAASC,UAAU,KAAQ,cAAc,CAEzC,MAAO,MAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,OAAO,CAAGH,WAAW,CAAC,CAAC,CAC7B,KAAM,CAAEI,WAAY,CAAC,CAAGH,UAAU,CAAC,CAAC,CACpC,KAAM,CAAAI,MAAM,CAAG,kCAAkC,CACjD,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAAAU,MAAM,CAAGX,WAAW,CACxB,CAACY,QAAgB,CAAEC,QAAgB,GAAK,CACtC,GAAI,CAACD,QAAQ,CAAE,CACbL,WAAW,CAAC,CAAEO,KAAK,CAAE,gBAAgB,CAAEC,MAAM,CAAE,OAAQ,CAAC,CAAC,CACzDL,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CACAA,UAAU,CAAC,IAAI,CAAC,CAChBR,KAAK,CACFc,IAAI,CAAOR,MAAM,CAAE,CAClBS,IAAI,CAAEL,QAAQ,CACdM,IAAI,CAAEL,QACR,CAAC,CAAC,CACDM,IAAI,CAAEC,GAAG,EAAK,CACb,GAAIA,GAAG,CAACC,IAAI,CAAE,CACZd,WAAW,CAAC,CAAEO,KAAK,CAAE,WAAW,CAAEC,MAAM,CAAE,SAAU,CAAC,CAAC,CACtDT,OAAO,CAAC,GAAG,CAAC,CACd,CACF,CAAC,CAAC,CACDgB,KAAK,CAAEC,KAAK,EAAK,CAChB,GAAIA,KAAK,CAACC,QAAQ,EAAID,KAAK,CAACC,QAAQ,CAACT,MAAM,GAAK,GAAG,CAAE,CACnD;AACAR,WAAW,CAAC,CAAEO,KAAK,CAAE,kBAAkB,CAAEC,MAAM,CAAE,OAAQ,CAAC,CAAC,CAC7D,CAAC,IAAM,CACL;AACAR,WAAW,CAAC,CAAEO,KAAK,CAAE,WAAW,CAAEC,MAAM,CAAE,OAAQ,CAAC,CAAC,CACtD,CACAL,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CACN,CAAC,CACD,CAACJ,OAAO,CAAEC,WAAW,CACvB,CAAC,CACD,MAAO,CAAEI,MAAM,CAAEF,OAAQ,CAAC,CAC5B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}