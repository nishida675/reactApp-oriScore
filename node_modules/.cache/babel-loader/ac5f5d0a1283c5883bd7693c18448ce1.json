{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Portal: () => Portal,\n  PortalManager: () => PortalManager,\n  usePortalManager: () => usePortalManager\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/portal-manager.tsx\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [PortalManagerContextProvider, usePortalManager] = (0, import_react_context.createContext)({\n  strict: false,\n  name: \"PortalManagerContext\"\n});\nfunction PortalManager(props) {\n  const {\n    children,\n    zIndex\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PortalManagerContextProvider, {\n    value: {\n      zIndex\n    },\n    children\n  });\n}\nPortalManager.displayName = \"PortalManager\";\n\n// src/portal.tsx\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_react_dom = require(\"react-dom\");\nvar import_react = require(\"react\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar [PortalContextProvider, usePortalContext] = (0, import_react_context2.createContext)({\n  strict: false,\n  name: \"PortalContext\"\n});\nvar PORTAL_CLASSNAME = \"chakra-portal\";\nvar PORTAL_SELECTOR = `.chakra-portal`;\nvar Container = props => /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"div\", {\n  className: \"chakra-portal-zIndex\",\n  style: {\n    position: \"absolute\",\n    zIndex: props.zIndex,\n    top: 0,\n    left: 0,\n    right: 0\n    // NB: Don't add `bottom: 0`, it makes the entire app unusable\n    // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n  },\n\n  children: props.children\n});\nvar DefaultPortal = props => {\n  const {\n    appendToParentPortal,\n    children\n  } = props;\n  const [tempNode, setTempNode] = (0, import_react.useState)(null);\n  const portal = (0, import_react.useRef)(null);\n  const [, forceUpdate] = (0, import_react.useState)({});\n  (0, import_react.useEffect)(() => forceUpdate({}), []);\n  const parentPortal = usePortalContext();\n  const manager = usePortalManager();\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    if (!tempNode) return;\n    const doc = tempNode.ownerDocument;\n    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;\n    if (!host) return;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = PORTAL_CLASSNAME;\n    host.appendChild(portal.current);\n    forceUpdate({});\n    const portalNode = portal.current;\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, [tempNode]);\n  const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */(0, import_jsx_runtime2.jsx)(Container, {\n    zIndex: manager == null ? void 0 : manager.zIndex,\n    children\n  }) : children;\n  return portal.current ? (0, import_react_dom.createPortal)( /* @__PURE__ */(0, import_jsx_runtime2.jsx)(PortalContextProvider, {\n    value: portal.current,\n    children: _children\n  }), portal.current) : /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"span\", {\n    ref: el => {\n      if (el) setTempNode(el);\n    }\n  });\n};\nvar ContainerPortal = props => {\n  const {\n    children,\n    containerRef,\n    appendToParentPortal\n  } = props;\n  const containerEl = containerRef.current;\n  const host = containerEl != null ? containerEl : typeof window !== \"undefined\" ? document.body : void 0;\n  const portal = (0, import_react.useMemo)(() => {\n    const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement(\"div\");\n    if (node) node.className = PORTAL_CLASSNAME;\n    return node;\n  }, [containerEl]);\n  const [, forceUpdate] = (0, import_react.useState)({});\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => forceUpdate({}), []);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    if (!portal || !host) return;\n    host.appendChild(portal);\n    return () => {\n      host.removeChild(portal);\n    };\n  }, [portal, host]);\n  if (host && portal) {\n    return (0, import_react_dom.createPortal)( /* @__PURE__ */(0, import_jsx_runtime2.jsx)(PortalContextProvider, {\n      value: appendToParentPortal ? portal : null,\n      children\n    }), portal);\n  }\n  return null;\n};\nfunction Portal(props) {\n  const portalProps = {\n    appendToParentPortal: true,\n    ...props\n  };\n  const {\n    containerRef,\n    ...rest\n  } = portalProps;\n  return containerRef ? /* @__PURE__ */(0, import_jsx_runtime2.jsx)(ContainerPortal, {\n    containerRef,\n    ...rest\n  }) : /* @__PURE__ */(0, import_jsx_runtime2.jsx)(DefaultPortal, {\n    ...rest\n  });\n}\nPortal.className = PORTAL_CLASSNAME;\nPortal.selector = PORTAL_SELECTOR;\nPortal.displayName = \"Portal\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Portal,\n  PortalManager,\n  usePortalManager\n});","map":null,"metadata":{},"sourceType":"script"}