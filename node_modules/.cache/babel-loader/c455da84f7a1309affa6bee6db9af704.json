{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Input: () => Input,\n  InputAddon: () => InputAddon,\n  InputGroup: () => InputGroup,\n  InputLeftAddon: () => InputLeftAddon,\n  InputLeftElement: () => InputLeftElement,\n  InputRightAddon: () => InputRightAddon,\n  InputRightElement: () => InputRightElement,\n  useInputGroupStyles: () => useInputGroupStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/input.tsx\nvar import_form_control = require(\"@chakra-ui/form-control\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar Input = (0, import_system.forwardRef)(function Input2(props, ref) {\n  const {\n    htmlSize,\n    ...rest\n  } = props;\n  const styles = (0, import_system.useMultiStyleConfig)(\"Input\", rest);\n  const ownProps = (0, import_system.omitThemingProps)(rest);\n  const input = (0, import_form_control.useFormControl)(ownProps);\n  const _className = (0, import_shared_utils.cx)(\"chakra-input\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.input, {\n    size: htmlSize,\n    ...input,\n    __css: styles.field,\n    ref,\n    className: _className\n  });\n});\nInput.displayName = \"Input\";\nInput.id = \"Input\";\n\n// src/input-addon.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\n\n// src/input-group.tsx\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_react_children_utils = require(\"@chakra-ui/react-children-utils\");\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_object_utils = require(\"@chakra-ui/object-utils\");\nvar import_react = require(\"react\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar [InputGroupStylesProvider, useInputGroupStyles] = (0, import_react_context.createContext)({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `\n});\nvar InputGroup = (0, import_system2.forwardRef)(function InputGroup2(props, ref) {\n  const styles = (0, import_system2.useMultiStyleConfig)(\"Input\", props);\n  const {\n    children,\n    className,\n    ...rest\n  } = (0, import_system2.omitThemingProps)(props);\n  const _className = (0, import_shared_utils2.cx)(\"chakra-input__group\", className);\n  const groupStyles = {};\n  const validChildren = (0, import_react_children_utils.getValidChildren)(children);\n  const input = styles.field;\n  validChildren.forEach(child => {\n    var _a, _b;\n    if (!styles) return;\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = (_a = input.height) != null ? _a : input.h;\n    }\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = (_b = input.height) != null ? _b : input.h;\n    }\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  const clones = validChildren.map(child => {\n    var _a, _b;\n    const theming = (0, import_object_utils.compact)({\n      size: ((_a = child.props) == null ? void 0 : _a.size) || props.size,\n      variant: ((_b = child.props) == null ? void 0 : _b.variant) || props.variant\n    });\n    return child.type.id !== \"Input\" ? (0, import_react.cloneElement)(child, theming) : (0, import_react.cloneElement)(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, {\n    className: _className,\n    ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\",\n      // Parts of inputs override z-index to ensure that they stack correctly on each other\n      // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n      isolation: \"isolate\",\n      ...styles.group\n    },\n    \"data-group\": true,\n    ...rest,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(InputGroupStylesProvider, {\n      value: styles,\n      children: clones\n    })\n  });\n});\nInputGroup.displayName = \"InputGroup\";\n\n// src/input-addon.tsx\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\"\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\"\n  }\n};\nvar StyledAddon = (0, import_system3.chakra)(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\"\n  }\n});\nvar InputAddon = (0, import_system3.forwardRef)(function InputAddon2(props, ref) {\n  var _a;\n  const {\n    placement = \"left\",\n    ...rest\n  } = props;\n  const placementStyles = (_a = placements[placement]) != null ? _a : {};\n  const styles = useInputGroupStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(StyledAddon, {\n    ref,\n    ...rest,\n    __css: {\n      ...styles.addon,\n      ...placementStyles\n    }\n  });\n});\nInputAddon.displayName = \"InputAddon\";\nvar InputLeftAddon = (0, import_system3.forwardRef)(function InputLeftAddon2(props, ref) {\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(InputAddon, {\n    ref,\n    placement: \"left\",\n    ...props,\n    className: (0, import_shared_utils3.cx)(\"chakra-input__left-addon\", props.className)\n  });\n});\nInputLeftAddon.displayName = \"InputLeftAddon\";\nInputLeftAddon.id = \"InputLeftAddon\";\nvar InputRightAddon = (0, import_system3.forwardRef)(function InputRightAddon2(props, ref) {\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(InputAddon, {\n    ref,\n    placement: \"right\",\n    ...props,\n    className: (0, import_shared_utils3.cx)(\"chakra-input__right-addon\", props.className)\n  });\n});\nInputRightAddon.displayName = \"InputRightAddon\";\nInputRightAddon.id = \"InputRightAddon\";\n\n// src/input-element.tsx\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar StyledInputElement = (0, import_system4.chakra)(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = (0, import_system4.forwardRef)(function InputElement2(props, ref) {\n  var _a, _b;\n  const {\n    placement = \"left\",\n    ...rest\n  } = props;\n  const styles = useInputGroupStyles();\n  const input = styles.field;\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n  const elementStyles = {\n    [attr]: \"0\",\n    width: (_a = input == null ? void 0 : input.height) != null ? _a : input == null ? void 0 : input.h,\n    height: (_b = input == null ? void 0 : input.height) != null ? _b : input == null ? void 0 : input.h,\n    fontSize: input == null ? void 0 : input.fontSize,\n    ...styles.element\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(StyledInputElement, {\n    ref,\n    __css: elementStyles,\n    ...rest\n  });\n});\nInputElement.id = \"InputElement\";\nInputElement.displayName = \"InputElement\";\nvar InputLeftElement = (0, import_system4.forwardRef)(function InputLeftElement2(props, ref) {\n  const {\n    className,\n    ...rest\n  } = props;\n  const _className = (0, import_shared_utils4.cx)(\"chakra-input__left-element\", className);\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(InputElement, {\n    ref,\n    placement: \"left\",\n    className: _className,\n    ...rest\n  });\n});\nInputLeftElement.id = \"InputLeftElement\";\nInputLeftElement.displayName = \"InputLeftElement\";\nvar InputRightElement = (0, import_system4.forwardRef)(function InputRightElement2(props, ref) {\n  const {\n    className,\n    ...rest\n  } = props;\n  const _className = (0, import_shared_utils4.cx)(\"chakra-input__right-element\", className);\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(InputElement, {\n    ref,\n    placement: \"right\",\n    className: _className,\n    ...rest\n  });\n});\nInputRightElement.id = \"InputRightElement\";\nInputRightElement.displayName = \"InputRightElement\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Input,\n  InputAddon,\n  InputGroup,\n  InputLeftAddon,\n  InputLeftElement,\n  InputRightAddon,\n  InputRightElement,\n  useInputGroupStyles\n});","map":null,"metadata":{},"sourceType":"script"}