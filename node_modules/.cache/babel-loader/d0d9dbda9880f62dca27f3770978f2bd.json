{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Select: () => Select,\n  SelectField: () => SelectField\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/select.tsx\nvar import_form_control = require(\"@chakra-ui/form-control\");\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\n\n// ../../utilities/object-utils/src/split.ts\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key)) picked[key] = value;else omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\n// src/select.tsx\nvar import_react = require(\"react\");\n\n// src/select-field.tsx\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar SelectField = (0, import_system.forwardRef)(function SelectField2(props, ref) {\n  const {\n    children,\n    placeholder,\n    className,\n    ...rest\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_system.chakra.select, {\n    ...rest,\n    ref,\n    className: (0, import_shared_utils.cx)(\"chakra-select\", className),\n    children: [placeholder && /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"option\", {\n      value: \"\",\n      children: placeholder\n    }), children]\n  });\n});\nSelectField.displayName = \"SelectField\";\n\n// src/select.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar Select = (0, import_system2.forwardRef)((props, ref) => {\n  var _a;\n  const styles = (0, import_system2.useMultiStyleConfig)(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = (0, import_system2.omitThemingProps)(props);\n  const [layoutProps, otherProps] = split(rest, import_system2.layoutPropNames);\n  const ownProps = (0, import_form_control.useFormControl)(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...((_a = styles.field) == null ? void 0 : _a[\"_focus\"])\n    }\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsxs)(import_system2.chakra.div, {\n    className: \"chakra-select__wrapper\",\n    __css: rootStyles,\n    ...layoutProps,\n    ...rootProps,\n    children: [/* @__PURE__ */(0, import_jsx_runtime2.jsx)(SelectField, {\n      ref,\n      height: h != null ? h : height,\n      minH: minH != null ? minH : minHeight,\n      placeholder,\n      ...ownProps,\n      __css: fieldStyles,\n      children: props.children\n    }), /* @__PURE__ */(0, import_jsx_runtime2.jsx)(SelectIcon, {\n      \"data-disabled\": (0, import_shared_utils2.dataAttr)(ownProps.disabled),\n      ...((iconColor || color) && {\n        color: iconColor || color\n      }),\n      __css: styles.icon,\n      ...(iconSize && {\n        fontSize: iconSize\n      }),\n      children: icon\n    })]\n  });\n});\nSelect.displayName = \"Select\";\nvar DefaultIcon = props => /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"svg\", {\n  viewBox: \"0 0 24 24\",\n  ...props,\n  children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  })\n});\nvar IconWrapper = (0, import_system2.chakra)(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = props => {\n  const {\n    children = /* @__PURE__ */(0, import_jsx_runtime2.jsx)(DefaultIcon, {}),\n    ...rest\n  } = props;\n  const clone = (0, import_react.cloneElement)(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(IconWrapper, {\n    ...rest,\n    className: \"chakra-select__icon-wrapper\",\n    children: (0, import_react.isValidElement)(children) ? clone : null\n  });\n};\nSelectIcon.displayName = \"SelectIcon\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Select,\n  SelectField\n});","map":null,"metadata":{},"sourceType":"script"}