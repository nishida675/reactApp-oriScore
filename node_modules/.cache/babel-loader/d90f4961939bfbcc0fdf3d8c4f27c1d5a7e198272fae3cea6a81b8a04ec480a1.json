{"ast":null,"code":"import{memo,useContext,useEffect,useRef}from\"react\";import{PrimaryButton}from\"../atoms/button/PrimaryButton\";import{useNavigate}from'react-router-dom';import{LoginUserContext}from'../../providers/LoginUserProvider';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const VotePage=/*#__PURE__*/memo(()=>{console.log(\"VotePage rendered\");const navigate=useNavigate();const{loginUser,setLoginUser}=useContext(LoginUserContext);const timerId=useRef(null);const VoteMove=()=>{navigate('/vote');};const RankingMove=()=>{navigate('/ranking');};// 自動ログアウトの時間（ミリ秒）\nconst autoLogoutTime=600000;// 10分\n//const autoLogoutTime = 10000; // 10秒\nuseEffect(()=>{const resetTimer=()=>{// タイマーをリセット\nif(timerId.current){clearTimeout(timerId.current);}// 新たなタイマーをセット\ntimerId.current=setTimeout(()=>{// ログアウト処理（例: setLoginUser(null)）\nsetLoginUser(null);// トップページにリダイレクト\nnavigate('/');},autoLogoutTime);};// ユーザーがアクションを起こすたびにタイマーをリセット\nconst resetTimerOnAction=()=>{resetTimer();};// 初回実行時にタイマーをセット\nresetTimer();// ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\ndocument.addEventListener('click',resetTimerOnAction);return()=>{// コンポーネントがアンマウントされたときにクリア\nif(timerId.current){clearTimeout(timerId.current);}document.removeEventListener('click',resetTimerOnAction);};},[setLoginUser,navigate,timerId]);// loginUserが存在するかどうかのチェック\nuseEffect(()=>{// loginUserが存在しない場合、トップページに遷移\nif(!loginUser){navigate('/');}},[loginUser,navigate]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u6295\\u7968\"}),/*#__PURE__*/_jsx(PrimaryButton,{onClick:VoteMove,children:\"\\u6295\\u7968\"}),/*#__PURE__*/_jsx(PrimaryButton,{onClick:RankingMove,children:\"\\u30E9\\u30F3\\u30AD\\u30F3\\u30B0\"})]});});","map":{"version":3,"names":["memo","useContext","useEffect","useRef","PrimaryButton","useNavigate","LoginUserContext","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","VotePage","console","log","navigate","loginUser","setLoginUser","timerId","VoteMove","RankingMove","autoLogoutTime","resetTimer","current","clearTimeout","setTimeout","resetTimerOnAction","document","addEventListener","removeEventListener","children","onClick"],"sources":["/Users/nishidanaoto/ateori-app/src/components/pages/VotePage.tsx"],"sourcesContent":["import { memo, useContext, useEffect, useRef } from \"react\";\nimport { PrimaryButton } from \"../atoms/button/PrimaryButton\";\nimport { useNavigate } from 'react-router-dom';\n\nimport { LoginUserContext } from '../../providers/LoginUserProvider';\n\nexport const VotePage = memo(() => {\n  console.log(\"VotePage rendered\");\n\n  const navigate = useNavigate();\n  const { loginUser, setLoginUser } = useContext(LoginUserContext);\n  const timerId = useRef<NodeJS.Timeout | null>(null);\n\n  const VoteMove = () => {\n    navigate('/vote');\n  }\n  const RankingMove = () => {\n    navigate('/ranking');\n  }\n\n  // 自動ログアウトの時間（ミリ秒）\n  const autoLogoutTime = 600000; // 10分\n  //const autoLogoutTime = 10000; // 10秒\n\n  useEffect(() => {\n    const resetTimer = () => {\n      // タイマーをリセット\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n\n      // 新たなタイマーをセット\n      timerId.current = setTimeout(() => {\n        // ログアウト処理（例: setLoginUser(null)）\n        setLoginUser(null);\n\n        // トップページにリダイレクト\n        navigate('/');\n      }, autoLogoutTime);\n    };\n\n    // ユーザーがアクションを起こすたびにタイマーをリセット\n    const resetTimerOnAction = () => {\n      resetTimer();\n    };\n\n    // 初回実行時にタイマーをセット\n    resetTimer();\n\n    // ユーザーのアクション（例: クリック）があった場合にタイマーをリセット\n    document.addEventListener('click', resetTimerOnAction);\n\n    return () => {\n      // コンポーネントがアンマウントされたときにクリア\n      if (timerId.current) {\n        clearTimeout(timerId.current);\n      }\n      document.removeEventListener('click', resetTimerOnAction);\n    };\n  }, [setLoginUser, navigate, timerId]);\n\n  // loginUserが存在するかどうかのチェック\n  useEffect(() => {\n    // loginUserが存在しない場合、トップページに遷移\n    if (!loginUser) {\n      navigate('/');\n    }\n  }, [loginUser, navigate]);\n  return (\n    <>\n      <p>投票</p>\n      <PrimaryButton onClick={VoteMove}>投票</PrimaryButton>\n      <PrimaryButton onClick={RankingMove}>ランキング</PrimaryButton>\n    </>\n  );\n});\n"],"mappings":"AAAA,OAASA,IAAI,CAAEC,UAAU,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC3D,OAASC,aAAa,KAAQ,+BAA+B,CAC7D,OAASC,WAAW,KAAQ,kBAAkB,CAE9C,OAASC,gBAAgB,KAAQ,mCAAmC,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAErE,MAAO,MAAM,CAAAC,QAAQ,cAAGb,IAAI,CAAC,IAAM,CACjCc,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAEhC,KAAM,CAAAC,QAAQ,CAAGX,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEY,SAAS,CAAEC,YAAa,CAAC,CAAGjB,UAAU,CAACK,gBAAgB,CAAC,CAChE,KAAM,CAAAa,OAAO,CAAGhB,MAAM,CAAwB,IAAI,CAAC,CAEnD,KAAM,CAAAiB,QAAQ,CAAGA,CAAA,GAAM,CACrBJ,QAAQ,CAAC,OAAO,CAAC,CACnB,CAAC,CACD,KAAM,CAAAK,WAAW,CAAGA,CAAA,GAAM,CACxBL,QAAQ,CAAC,UAAU,CAAC,CACtB,CAAC,CAED;AACA,KAAM,CAAAM,cAAc,CAAG,MAAM,CAAE;AAC/B;AAEApB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqB,UAAU,CAAGA,CAAA,GAAM,CACvB;AACA,GAAIJ,OAAO,CAACK,OAAO,CAAE,CACnBC,YAAY,CAACN,OAAO,CAACK,OAAO,CAAC,CAC/B,CAEA;AACAL,OAAO,CAACK,OAAO,CAAGE,UAAU,CAAC,IAAM,CACjC;AACAR,YAAY,CAAC,IAAI,CAAC,CAElB;AACAF,QAAQ,CAAC,GAAG,CAAC,CACf,CAAC,CAAEM,cAAc,CAAC,CACpB,CAAC,CAED;AACA,KAAM,CAAAK,kBAAkB,CAAGA,CAAA,GAAM,CAC/BJ,UAAU,CAAC,CAAC,CACd,CAAC,CAED;AACAA,UAAU,CAAC,CAAC,CAEZ;AACAK,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAEF,kBAAkB,CAAC,CAEtD,MAAO,IAAM,CACX;AACA,GAAIR,OAAO,CAACK,OAAO,CAAE,CACnBC,YAAY,CAACN,OAAO,CAACK,OAAO,CAAC,CAC/B,CACAI,QAAQ,CAACE,mBAAmB,CAAC,OAAO,CAAEH,kBAAkB,CAAC,CAC3D,CAAC,CACH,CAAC,CAAE,CAACT,YAAY,CAAEF,QAAQ,CAAEG,OAAO,CAAC,CAAC,CAErC;AACAjB,SAAS,CAAC,IAAM,CACd;AACA,GAAI,CAACe,SAAS,CAAE,CACdD,QAAQ,CAAC,GAAG,CAAC,CACf,CACF,CAAC,CAAE,CAACC,SAAS,CAAED,QAAQ,CAAC,CAAC,CACzB,mBACEJ,KAAA,CAAAF,SAAA,EAAAqB,QAAA,eACEvB,IAAA,MAAAuB,QAAA,CAAG,cAAE,CAAG,CAAC,cACTvB,IAAA,CAACJ,aAAa,EAAC4B,OAAO,CAAEZ,QAAS,CAAAW,QAAA,CAAC,cAAE,CAAe,CAAC,cACpDvB,IAAA,CAACJ,aAAa,EAAC4B,OAAO,CAAEX,WAAY,CAAAU,QAAA,CAAC,gCAAK,CAAe,CAAC,EAC1D,CAAC,CAEP,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}