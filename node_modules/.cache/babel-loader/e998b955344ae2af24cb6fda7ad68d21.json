{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Editable: () => Editable,\n  EditableInput: () => EditableInput,\n  EditablePreview: () => EditablePreview,\n  EditableTextarea: () => EditableTextarea,\n  useEditable: () => useEditable,\n  useEditableContext: () => useEditableContext,\n  useEditableControls: () => useEditableControls,\n  useEditableState: () => useEditableState,\n  useEditableStyles: () => useEditableStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/editable.tsx\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_system = require(\"@chakra-ui/system\");\n\n// src/editable-context.ts\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar [EditableStylesProvider, useEditableStyles] = (0, import_react_context.createContext)({\n  name: `EditableStylesContext`,\n  errorMessage: `useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Editable />\" `\n});\nvar [EditableProvider, useEditableContext] = (0, import_react_context.createContext)({\n  name: \"EditableContext\",\n  errorMessage: \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\"\n});\n\n// src/use-editable.ts\nvar import_react_use_focus_on_pointer_down = require(\"@chakra-ui/react-use-focus-on-pointer-down\");\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react_use_update_effect = require(\"@chakra-ui/react-use-update-effect\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_react_use_callback_ref = require(\"@chakra-ui/react-use-callback-ref\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react = require(\"react\");\nfunction contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\nfunction useEditable(props = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props;\n  const onEditProp = (0, import_react_use_callback_ref.useCallbackRef)(onEditCallback);\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  const [isEditing, setIsEditing] = (0, import_react.useState)(defaultIsEditing);\n  const [value, setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const [prevValue, setPrevValue] = (0, import_react.useState)(value);\n  const inputRef = (0, import_react.useRef)(null);\n  const previewRef = (0, import_react.useRef)(null);\n  const editButtonRef = (0, import_react.useRef)(null);\n  const cancelButtonRef = (0, import_react.useRef)(null);\n  const submitButtonRef = (0, import_react.useRef)(null);\n  (0, import_react_use_focus_on_pointer_down.useFocusOnPointerDown)({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  const isInteractive = !isEditing && !isDisabled;\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    var _a, _b;\n    if (isEditing) {\n      (_a = inputRef.current) == null ? void 0 : _a.focus();\n      if (selectAllOnFocus) (_b = inputRef.current) == null ? void 0 : _b.select();\n    }\n  }, []);\n  (0, import_react_use_update_effect.useUpdateEffect)(() => {\n    var _a, _b, _c, _d;\n    if (!isEditing) {\n      if (finalFocusRef) {\n        (_a = finalFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        (_b = editButtonRef.current) == null ? void 0 : _b.focus();\n      }\n      return;\n    }\n    (_c = inputRef.current) == null ? void 0 : _c.focus();\n    if (selectAllOnFocus) {\n      (_d = inputRef.current) == null ? void 0 : _d.select();\n    }\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  const onEdit = (0, import_react.useCallback)(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  const onUpdatePrevValue = (0, import_react.useCallback)(() => {\n    setPrevValue(value);\n  }, [value]);\n  const onCancel = (0, import_react.useCallback)(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [onCancelProp, onBlurProp, setValue, prevValue]);\n  const onSubmit = (0, import_react.useCallback)(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [value, onSubmitProp, onBlurProp, prevValue]);\n  (0, import_react.useEffect)(() => {\n    if (isEditing) return;\n    const inputEl = inputRef.current;\n    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {\n      inputEl == null ? void 0 : inputEl.blur();\n    }\n  }, [isEditing]);\n  const onChange = (0, import_react.useCallback)(event => {\n    setValue(event.currentTarget.value);\n  }, [setValue]);\n  const onKeyDown = (0, import_react.useCallback)(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel,\n      Enter: event2 => {\n        if (!event2.shiftKey && !event2.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  const onKeyDownWithoutSubmit = (0, import_react.useCallback)(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel]);\n  const isValueEmpty = value.length === 0;\n  const onBlur = (0, import_react.useCallback)(event => {\n    var _a;\n    if (!isEditing) return;\n    const doc = event.currentTarget.ownerDocument;\n    const relatedTarget = (_a = event.relatedTarget) != null ? _a : doc.activeElement;\n    const targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    const targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    const isValidBlur = !targetIsCancel && !targetIsSubmit;\n    if (isValidBlur) {\n      if (submitOnBlur) {\n        onSubmit();\n      } else {\n        onCancel();\n      }\n    }\n  }, [submitOnBlur, onSubmit, onCancel, isEditing]);\n  const getPreviewProps = (0, import_react.useCallback)((props2 = {}, ref = null) => {\n    const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;\n    return {\n      ...props2,\n      ref: (0, import_react_use_merge_refs.mergeRefs)(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": (0, import_shared_utils.ariaAttr)(isDisabled),\n      tabIndex,\n      onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onEdit, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, onUpdatePrevValue, placeholder, value]);\n  const getInputProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    hidden: !isEditing,\n    placeholder,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, inputRef),\n    disabled: isDisabled,\n    \"aria-disabled\": (0, import_shared_utils.ariaAttr)(isDisabled),\n    value,\n    onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, onBlur),\n    onChange: (0, import_shared_utils.callAllHandlers)(props2.onChange, onChange),\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown),\n    onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onUpdatePrevValue)\n  }), [isDisabled, isEditing, onBlur, onChange, onKeyDown, onUpdatePrevValue, placeholder, value]);\n  const getTextareaProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    hidden: !isEditing,\n    placeholder,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, inputRef),\n    disabled: isDisabled,\n    \"aria-disabled\": (0, import_shared_utils.ariaAttr)(isDisabled),\n    value,\n    onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, onBlur),\n    onChange: (0, import_shared_utils.callAllHandlers)(props2.onChange, onChange),\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDownWithoutSubmit),\n    onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onUpdatePrevValue)\n  }), [isDisabled, isEditing, onBlur, onChange, onKeyDownWithoutSubmit, onUpdatePrevValue, placeholder, value]);\n  const getEditButtonProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    \"aria-label\": \"Edit\",\n    ...props2,\n    type: \"button\",\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onEdit),\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, editButtonRef),\n    disabled: isDisabled\n  }), [onEdit, isDisabled]);\n  const getSubmitButtonProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    \"aria-label\": \"Submit\",\n    ref: (0, import_react_use_merge_refs.mergeRefs)(submitButtonRef, ref),\n    type: \"button\",\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onSubmit),\n    disabled: isDisabled\n  }), [onSubmit, isDisabled]);\n  const getCancelButtonProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    \"aria-label\": \"Cancel\",\n    id: \"cancel\",\n    ...props2,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(cancelButtonRef, ref),\n    type: \"button\",\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onCancel),\n    disabled: isDisabled\n  }), [onCancel, isDisabled]);\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}\n\n// src/editable.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar Editable = (0, import_system.forwardRef)(function Editable2(props, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Editable\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const {\n    htmlProps,\n    ...context\n  } = useEditable(ownProps);\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  } = context;\n  const _className = (0, import_shared_utils2.cx)(\"chakra-editable\", props.className);\n  const children = (0, import_shared_utils2.runIfFn)(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(EditableProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(EditableStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n        ref,\n        ...htmlProps,\n        className: _className,\n        children\n      })\n    })\n  });\n});\nEditable.displayName = \"Editable\";\n\n// src/editable-input.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\n\n// src/shared.ts\nvar commonStyles = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\"\n};\n\n// src/editable-input.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar EditableInput = (0, import_system2.forwardRef)(function EditableInput2(props, ref) {\n  const {\n    getInputProps\n  } = useEditableContext();\n  const styles = useEditableStyles();\n  const inputProps = getInputProps(props, ref);\n  const _className = (0, import_shared_utils3.cx)(\"chakra-editable__input\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.input, {\n    ...inputProps,\n    __css: {\n      outline: 0,\n      ...commonStyles,\n      ...styles.input\n    },\n    className: _className\n  });\n});\nEditableInput.displayName = \"EditableInput\";\n\n// src/editable-preview.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar EditablePreview = (0, import_system3.forwardRef)(function EditablePreview2(props, ref) {\n  const {\n    getPreviewProps\n  } = useEditableContext();\n  const styles = useEditableStyles();\n  const previewProps = getPreviewProps(props, ref);\n  const _className = (0, import_shared_utils4.cx)(\"chakra-editable__preview\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.span, {\n    ...previewProps,\n    __css: {\n      cursor: \"text\",\n      display: \"inline-block\",\n      ...commonStyles,\n      ...styles.preview\n    },\n    className: _className\n  });\n});\nEditablePreview.displayName = \"EditablePreview\";\n\n// src/editable-textarea.tsx\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar EditableTextarea = (0, import_system4.forwardRef)(function EditableTextarea2(props, ref) {\n  const {\n    getTextareaProps\n  } = useEditableContext();\n  const styles = useEditableStyles();\n  const textareaProps = getTextareaProps(props, ref);\n  const _className = (0, import_shared_utils5.cx)(\"chakra-editable__textarea\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system4.chakra.textarea, {\n    ...textareaProps,\n    __css: {\n      outline: 0,\n      ...commonStyles,\n      ...styles.textarea\n    },\n    className: _className\n  });\n});\nEditableTextarea.displayName = \"EditableTextarea\";\n\n// src/use-editable-controls.tsx\nfunction useEditableControls() {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  } = useEditableContext();\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  };\n}\n\n// src/use-editable-state.tsx\nfunction useEditableState() {\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  } = useEditableContext();\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Editable,\n  EditableInput,\n  EditablePreview,\n  EditableTextarea,\n  useEditable,\n  useEditableContext,\n  useEditableControls,\n  useEditableState,\n  useEditableStyles\n});","map":null,"metadata":{},"sourceType":"script"}