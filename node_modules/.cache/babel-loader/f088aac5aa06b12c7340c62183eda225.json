{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  PinInput: () => PinInput,\n  PinInputDescendantsProvider: () => PinInputDescendantsProvider,\n  PinInputField: () => PinInputField,\n  PinInputProvider: () => PinInputProvider,\n  usePinInput: () => usePinInput,\n  usePinInputContext: () => usePinInputContext,\n  usePinInputField: () => usePinInputField\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/pin-input.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react_children_utils = require(\"@chakra-ui/react-children-utils\");\n\n// src/use-pin-input.ts\nvar import_descendant = require(\"@chakra-ui/descendant\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_react = require(\"react\");\nvar [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = (0, import_descendant.createDescendantContext)();\nvar [PinInputProvider, usePinInputContext] = (0, import_react_context.createContext)({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n});\nvar toArray = value => value == null ? void 0 : value.split(\"\");\nfunction validate(value, type) {\n  const NUMERIC_REGEX = /^[0-9]+$/;\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\nfunction usePinInput(props = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"\\u25CB\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask\n  } = props;\n  const uuid = (0, import_react.useId)();\n  const id = idProp != null ? idProp : `pin-input-${uuid}`;\n  const descendants = usePinInputDescendants();\n  const [moveFocus, setMoveFocus] = (0, import_react.useState)(true);\n  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(-1);\n  const [values, setValues] = (0, import_react_use_controllable_state.useControllableState)({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: values2 => onChange == null ? void 0 : onChange(values2.join(\"\"))\n  });\n  (0, import_react.useEffect)(() => {\n    if (autoFocus) {\n      const first = descendants.first();\n      if (first) {\n        requestAnimationFrame(() => {\n          first.node.focus();\n        });\n      }\n    }\n  }, [descendants]);\n  const focusNext = (0, import_react.useCallback)(index => {\n    if (!moveFocus || !manageFocus) return;\n    const next = descendants.next(index, false);\n    if (next) {\n      requestAnimationFrame(() => {\n        next.node.focus();\n      });\n    }\n  }, [descendants, moveFocus, manageFocus]);\n  const setValue = (0, import_react.useCallback)((value2, index, handleFocus = true) => {\n    const nextValues = [...values];\n    nextValues[index] = value2;\n    setValues(nextValues);\n    const isComplete = value2 !== \"\" && nextValues.length === descendants.count() && nextValues.every(inputValue => inputValue != null && inputValue !== \"\");\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      if (handleFocus) focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  const clear = (0, import_react.useCallback)(() => {\n    var _a;\n    const values2 = Array(descendants.count()).fill(\"\");\n    setValues(values2);\n    const first = descendants.first();\n    (_a = first == null ? void 0 : first.node) == null ? void 0 : _a.focus();\n  }, [descendants, setValues]);\n  const getNextValue = (0, import_react.useCallback)((value2, eventValue) => {\n    let nextValue = eventValue;\n    if ((value2 == null ? void 0 : value2.length) > 0) {\n      if (value2[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value2[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n    return nextValue;\n  }, []);\n  const getInputProps = (0, import_react.useCallback)(props2 => {\n    const {\n      index,\n      ...rest\n    } = props2;\n    const onChange2 = event => {\n      const eventValue = event.target.value;\n      const currentValue = values[index];\n      const nextValue = getNextValue(currentValue, eventValue);\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      }\n      if (eventValue.length > 2) {\n        if (validate(eventValue, type)) {\n          const nextValue2 = eventValue.split(\"\").filter((_, index2) => index2 < descendants.count());\n          setValues(nextValue2);\n          if (nextValue2.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(nextValue2.join(\"\"));\n          }\n        }\n      } else {\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n        setMoveFocus(true);\n      }\n    };\n    const onKeyDown = event => {\n      var _a;\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          const prevInput = descendants.prev(index, false);\n          if (prevInput) {\n            setValue(\"\", index - 1, false);\n            (_a = prevInput.node) == null ? void 0 : _a.focus();\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n    const onFocus = () => {\n      setFocusedIndex(index);\n    };\n    const onBlur = () => {\n      setFocusedIndex(-1);\n    };\n    const hasFocus = focusedIndex === index;\n    const inputType = type === \"number\" ? \"tel\" : \"text\";\n    return {\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType,\n      ...rest,\n      id: `${id}-${index}`,\n      disabled: isDisabled,\n      \"aria-invalid\": (0, import_shared_utils.ariaAttr)(isInvalid),\n      onChange: (0, import_shared_utils.callAllHandlers)(rest.onChange, onChange2),\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(rest.onKeyDown, onKeyDown),\n      onFocus: (0, import_shared_utils.callAllHandlers)(rest.onFocus, onFocus),\n      onBlur: (0, import_shared_utils.callAllHandlers)(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    };\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear\n  };\n}\nfunction usePinInputField(props = {}, ref = null) {\n  const {\n    getInputProps\n  } = usePinInputContext();\n  const {\n    index,\n    register\n  } = usePinInputDescendant();\n  return getInputProps({\n    ...props,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(register, ref),\n    index\n  });\n}\n\n// src/pin-input.tsx\nvar import_react2 = require(\"react\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction PinInput(props) {\n  const styles = (0, import_system.useStyleConfig)(\"PinInput\", props);\n  const {\n    children,\n    ...rest\n  } = (0, import_system.omitThemingProps)(props);\n  const {\n    descendants,\n    ...context\n  } = usePinInput(rest);\n  const clones = (0, import_react_children_utils.getValidChildren)(children).map(child => (0, import_react2.cloneElement)(child, {\n    __css: styles\n  }));\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PinInputDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(PinInputProvider, {\n      value: context,\n      children: clones\n    })\n  });\n}\nPinInput.displayName = \"PinInput\";\nvar PinInputField = (0, import_system.forwardRef)(function PinInputField2(props, ref) {\n  const inputProps = usePinInputField(props, ref);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.input, {\n    ...inputProps,\n    className: (0, import_shared_utils2.cx)(\"chakra-pin-input\", props.className)\n  });\n});\nPinInputField.displayName = \"PinInputField\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  PinInput,\n  PinInputDescendantsProvider,\n  PinInputField,\n  PinInputProvider,\n  usePinInput,\n  usePinInputContext,\n  usePinInputField\n});","map":null,"metadata":{},"sourceType":"script"}