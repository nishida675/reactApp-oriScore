{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  CSSVars: () => CSSVars,\n  GlobalStyle: () => GlobalStyle,\n  StylesProvider: () => StylesProvider,\n  ThemeProvider: () => ThemeProvider,\n  chakra: () => chakra,\n  createStylesContext: () => createStylesContext,\n  forwardRef: () => forwardRef,\n  getToken: () => getToken,\n  keyframes: () => import_react8.keyframes,\n  shouldForwardProp: () => shouldForwardProp,\n  styled: () => styled,\n  toCSSObject: () => toCSSObject,\n  useChakra: () => useChakra,\n  useComponentStyles__unstable: () => useComponentStyles__unstable,\n  useMultiStyleConfig: () => useMultiStyleConfig,\n  useStyleConfig: () => useStyleConfig,\n  useStyles: () => useStyles,\n  useTheme: () => useTheme,\n  useToken: () => useToken\n});\nmodule.exports = __toCommonJS(src_exports);\n__reExport(src_exports, require(\"@chakra-ui/color-mode\"), module.exports);\n__reExport(src_exports, require(\"@chakra-ui/styled-system\"), module.exports);\nvar import_react8 = require(\"@emotion/react\");\n\n// src/hooks.ts\nvar import_color_mode = require(\"@chakra-ui/color-mode\");\n\n// src/use-theme.ts\nvar import_react = require(\"@emotion/react\");\nvar import_react2 = require(\"react\");\nfunction useTheme() {\n  const theme = (0, import_react2.useContext)(import_react.ThemeContext);\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\");\n  }\n  return theme;\n}\n\n// src/hooks.ts\nfunction useChakra() {\n  const colorModeResult = (0, import_color_mode.useColorMode)();\n  const theme = useTheme();\n  return {\n    ...colorModeResult,\n    theme\n  };\n}\nfunction getBreakpointValue(theme, value, fallback) {\n  var _a2, _b;\n  if (value == null) return value;\n  const getValue = val => {\n    var _a3, _b2;\n    return (_b2 = (_a3 = theme.__breakpoints) == null ? void 0 : _a3.asArray) == null ? void 0 : _b2[val];\n  };\n  return (_b = (_a2 = getValue(value)) != null ? _a2 : getValue(fallback)) != null ? _b : fallback;\n}\nfunction getTokenValue(theme, value, fallback) {\n  var _a2, _b;\n  if (value == null) return value;\n  const getValue = val => {\n    var _a3, _b2;\n    return (_b2 = (_a3 = theme.__cssMap) == null ? void 0 : _a3[val]) == null ? void 0 : _b2.value;\n  };\n  return (_b = (_a2 = getValue(value)) != null ? _a2 : getValue(fallback)) != null ? _b : fallback;\n}\nfunction useToken(scale, token, fallback) {\n  const theme = useTheme();\n  return getToken(scale, token, fallback)(theme);\n}\nfunction getToken(scale, token, fallback) {\n  const _token = Array.isArray(token) ? token : [token];\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback];\n  return theme => {\n    const fallbackArr = _fallback.filter(Boolean);\n    const result = _token.map((token2, index) => {\n      var _a2, _b;\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token2, (_a2 = fallbackArr[index]) != null ? _a2 : token2);\n      }\n      const path = `${scale}.${token2}`;\n      return getTokenValue(theme, path, (_b = fallbackArr[index]) != null ? _b : token2);\n    });\n    return Array.isArray(token) ? result : result[0];\n  };\n}\n\n// src/providers.tsx\nvar import_color_mode2 = require(\"@chakra-ui/color-mode\");\nvar import_react_utils = require(\"@chakra-ui/react-utils\");\nvar import_styled_system = require(\"@chakra-ui/styled-system\");\nvar import_utils = require(\"@chakra-ui/utils\");\nvar import_react3 = require(\"@emotion/react\");\nvar import_react4 = require(\"react\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = (0, import_react4.useMemo)(() => (0, import_styled_system.toCSSVar)(theme), [theme]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_react3.ThemeProvider, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */(0, import_jsx_runtime.jsx)(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\nfunction CSSVars({\n  root = \":host, :root\"\n}) {\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react3.Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\nvar [StylesProvider, useStyles] = (0, import_react_utils.createContext)({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return (0, import_react_utils.createContext)({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = (0, import_color_mode2.useColorMode)();\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react3.Global, {\n    styles: theme => {\n      const styleObjectOrFn = (0, import_utils.memoizedGet)(theme, \"styles.global\");\n      const globalStyles = (0, import_utils.runIfFn)(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = (0, import_styled_system.css)(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\n\n// src/system.ts\nvar import_color_mode3 = require(\"@chakra-ui/color-mode\");\nvar import_styled_system3 = require(\"@chakra-ui/styled-system\");\nvar import_utils2 = require(\"@chakra-ui/utils\");\nvar import_object_utils = require(\"@chakra-ui/object-utils\");\nvar import_styled = __toESM(require(\"@emotion/styled\"));\nvar import_react5 = __toESM(require(\"react\"));\n\n// src/should-forward-prop.ts\nvar import_styled_system2 = require(\"@chakra-ui/styled-system\");\nvar allPropNames = /* @__PURE__ */new Set([...import_styled_system2.propNames, \"textStyle\", \"layerStyle\", \"apply\", \"noOfLines\", \"focusBorderColor\", \"errorBorderColor\", \"as\", \"__css\", \"css\", \"sx\"]);\nvar validHTMLProps = /* @__PURE__ */new Set([\"htmlWidth\", \"htmlHeight\", \"htmlSize\", \"htmlTranslate\"]);\nfunction shouldForwardProp(prop) {\n  return validHTMLProps.has(prop) || !allPropNames.has(prop);\n}\n\n// src/system.ts\nvar _a;\nvar emotion_styled = (_a = import_styled.default.default) != null ? _a : import_styled.default;\nvar toCSSObject = ({\n  baseStyle\n}) => props => {\n  const {\n    theme,\n    css: cssProp,\n    __css,\n    sx,\n    ...rest\n  } = props;\n  const styleProps = (0, import_utils2.objectFilter)(rest, (_, prop) => (0, import_styled_system3.isStyleProp)(prop));\n  const finalBaseStyle = (0, import_utils2.runIfFn)(baseStyle, props);\n  const finalStyles = (0, import_object_utils.assignAfter)({}, __css, finalBaseStyle, (0, import_utils2.filterUndefined)(styleProps), sx);\n  const computedCSS = (0, import_styled_system3.css)(finalStyles)(props.theme);\n  return cssProp ? [computedCSS, cssProp] : computedCSS;\n};\nfunction styled(component, options) {\n  const {\n    baseStyle,\n    ...styledOptions\n  } = options != null ? options : {};\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp;\n  }\n  const styleObject = toCSSObject({\n    baseStyle\n  });\n  const Component = emotion_styled(component, styledOptions)(styleObject);\n  const chakraComponent = import_react5.default.forwardRef(function ChakraComponent(props, ref) {\n    const {\n      colorMode,\n      forced\n    } = (0, import_color_mode3.useColorMode)();\n    return import_react5.default.createElement(Component, {\n      ref,\n      \"data-theme\": forced ? colorMode : void 0,\n      ...props\n    });\n  });\n  return chakraComponent;\n}\n\n// src/forward-ref.tsx\nvar import_react6 = require(\"react\");\nfunction forwardRef(component) {\n  return (0, import_react6.forwardRef)(component);\n}\n\n// src/use-style-config.ts\nvar import_styled_system4 = require(\"@chakra-ui/styled-system\");\nvar import_theme_utils = require(\"@chakra-ui/theme-utils\");\nvar import_utils3 = require(\"@chakra-ui/utils\");\nvar import_react7 = require(\"react\");\nvar import_react_fast_compare = __toESM(require(\"react-fast-compare\"));\nfunction useStyleConfigImpl(themeKey, props = {}) {\n  var _a2;\n  const {\n    styleConfig: styleConfigProp,\n    ...rest\n  } = props;\n  const {\n    theme,\n    colorMode\n  } = useChakra();\n  const themeStyleConfig = themeKey ? (0, import_utils3.memoizedGet)(theme, `components.${themeKey}`) : void 0;\n  const styleConfig = styleConfigProp || themeStyleConfig;\n  const mergedProps = (0, import_utils3.mergeWith)({\n    theme,\n    colorMode\n  }, (_a2 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a2 : {}, (0, import_utils3.filterUndefined)((0, import_utils3.omit)(rest, [\"children\"])));\n  const stylesRef = (0, import_react7.useRef)({});\n  if (styleConfig) {\n    const getStyles = (0, import_styled_system4.resolveStyleConfig)(styleConfig);\n    const styles = getStyles(mergedProps);\n    const isStyleEqual = (0, import_react_fast_compare.default)(stylesRef.current, styles);\n    if (!isStyleEqual) {\n      stylesRef.current = styles;\n    }\n  }\n  return stylesRef.current;\n}\nfunction useStyleConfig(themeKey, props = {}) {\n  return useStyleConfigImpl(themeKey, props);\n}\nfunction useMultiStyleConfig(themeKey, props = {}) {\n  return useStyleConfigImpl(themeKey, props);\n}\nfunction useComponentStyles__unstable(themeKey, props) {\n  var _a2;\n  const {\n    baseConfig,\n    ...restProps\n  } = props;\n  const {\n    theme\n  } = useChakra();\n  const overrides = (_a2 = theme.components) == null ? void 0 : _a2[themeKey];\n  const styleConfig = overrides ? (0, import_theme_utils.mergeThemeOverride)(overrides, baseConfig) : baseConfig;\n  return useStyleConfigImpl(null, {\n    ...restProps,\n    styleConfig\n  });\n}\n\n// src/factory.ts\nfunction factory() {\n  const cache = /* @__PURE__ */new Map();\n  return new Proxy(styled, {\n    /**\n     * @example\n     * const Div = chakra(\"div\")\n     * const WithChakra = chakra(AnotherComponent)\n     */\n    apply(target, thisArg, argArray) {\n      return styled(...argArray);\n    },\n    /**\n     * @example\n     * <chakra.div />\n     */\n    get(_, element) {\n      if (!cache.has(element)) {\n        cache.set(element, styled(element));\n      }\n      return cache.get(element);\n    }\n  });\n}\nvar chakra = factory();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  CSSVars,\n  GlobalStyle,\n  StylesProvider,\n  ThemeProvider,\n  chakra,\n  createStylesContext,\n  forwardRef,\n  getToken,\n  keyframes,\n  shouldForwardProp,\n  styled,\n  toCSSObject,\n  useChakra,\n  useComponentStyles__unstable,\n  useMultiStyleConfig,\n  useStyleConfig,\n  useStyles,\n  useTheme,\n  useToken,\n  ...require(\"@chakra-ui/color-mode\"),\n  ...require(\"@chakra-ui/styled-system\")\n});","map":null,"metadata":{},"sourceType":"script"}